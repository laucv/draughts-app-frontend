{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/game/controllers/dialog/DialogGameBoard.component.ts","webpack:///src/app/game/views/dialog/dialog-game-board.component.html","webpack:///src/app/game/controllers/dialog/DialogGameName.component.ts","webpack:///src/app/game/views/dialog/dialog-game-name.html","webpack:///src/app/game/controllers/mySquare.component.ts","webpack:///src/app/game/views/mySquare.component.html","webpack:///src/app/game/controllers/pieces/draught.component.ts","webpack:///src/app/game/views/pieces/draught.component.html","webpack:///src/app/game/controllers/pieces/pawn.component.ts","webpack:///src/app/game/views/pieces/pawn.component.html","webpack:///src/app/game/game.service.ts","webpack:///src/app/game/models/Board.ts","webpack:///src/app/game/models/Color.ts","webpack:///src/app/game/models/Coordinate.ts","webpack:///src/app/game/models/DirectionClass.ts","webpack:///src/app/game/models/Draught.ts","webpack:///src/app/game/models/Error.ts","webpack:///src/app/game/models/Game.ts","webpack:///src/app/game/models/Pawn.ts","webpack:///src/app/game/models/Piece.ts","webpack:///src/app/game/models/Turn.ts","webpack:///src/app/game/models/mySquare.ts","webpack:///src/app/playGame/openGame.component.ts","webpack:///src/app/playGame/openGame.component.html","webpack:///src/app/services/draughts.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/app/users/login/login.component.ts","webpack:///src/app/users/login/login.component.html","webpack:///src/app/users/profile/profile.component.ts","webpack:///src/app/users/profile/profile.component.html","webpack:///src/app/users/register/registration.component.ts","webpack:///src/app/users/register/registration.component.html","webpack:///src/app/welcome/welcome.component.ts","webpack:///src/app/welcome/welcome.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","userService","AppComponent","title","apiEndPoint","API","selector","templateUrl","styleUrls","AppModule","declarations","entryComponents","providers","bootstrap","DialogGameBoard","gameService","draughtsService","dialog","dialogRef","data","gameName","setBoard","board","resetGame","boardDimension","getBoardView","position","row","getDimension","column","charAt","setPiece","RED","BLACK","getTurnColor","openDialog","put","toStringBoard","subscribe","alert","open","height","width","afterClosed","result","console","log","post","closeAll","logout","saveGame","DialogGameName","close","onNoClick","MySquareComponent","userClicks","square","getPiece","getRow","getColumn","DraughtComponent","PawnComponent","GameService","game","piece","coordinate","pieceIsSelected","multiJump","boardView","initBoard","initTurn","resetTurn","i","j","initialize","setSelected","clearHighlightedPiece","movePiece","mySquare","forEach","target","error","move","getSquarePiece","clearPiece","putPiece","direction","getDirection","getDiagonalCoordinate","equals","clearJumpedPiece","isMultiJumpPossible","getDiagonalDistance","prepareForMultiJump","transformPawnToDraught","prepareForNextMovement","checkGameIsFinished","isBlocked","getOppositeTurnColor","changeTurnToAllowMultiJump","getCode","isLast","isFirst","changePiece","color","getNumberOfPieces","string","providedIn","Board","pieces","origin","remove","betweenDiagonalPieces","Array","isOnDiagonal","getBetweenDiagonalCoordinates","push","getColor","availablePiecesToJump","checkDiagonals","MINIMUM_LIMIT_TO_JUMP","MAXIMUM_LIMIT_TO_JUMP","jumpIsPossible","SE","SW","NW","NE","Color","LIMITS","StringIsNumber","value","isNaN","Number","valueOf","colorGetInitialColor","isBlack","getColorValue","colorValues","Object","filter","map","key","Coordinate","LOWER_LIMIT","UPPER_LIMIT","substract","subtract","values","isOnDirection","Math","abs","distance","getDistanceCoordinateRow","getDistanceCoordinateColumn","coordinates","cursor","plus","getDistanceCoordinate","level","diagonalCoordinates","diagonalCoordinate","isWithIn","DIMENSION","DirectionClass","horizontalShift","verticalShift","EnumDirection","Direction","Map","Draught","pieceAmountBetweenCoordinates","pair","MAX_DISTANCE_JUMP","TOO_MUCH_DISTANCE_TO_JUMP","TOO_MUCH_EATINGS","CODES","getErrorValues","Game","turn","reset","change","removedCoordinates","isCorrectPairMove","pairMove","length","isCorrectGlobalMove","unMovesUntilPair","BAD_FORMAT","isEmpty","EMPTY_ORIGIN","getOppositeColor","OPPOSITE_PIECE","NOT_EMPTY_TARGET","getBetweenDiagonalPieces","isCorrectMovement","forRemoving","getBetweenDiagonalPiece","unshift","isLimit","betweenCoordinates","TOO_MUCH_JUMPS","removedPiece","getCoordinatesWithActualColor","isBlockedCoordinate","getDiagonalCoordinates","resetColor","getAvailablePiecesToJump","impresion","Pawn","isAdvanced","NOT_ADVANCED","MAX_DISTANCE","TOO_MUCH_ADVANCED","WITHOUT_EATING","Piece","NOT_DIAGONAL","COLLEAGUE_EATING","isCorrectDiagonalMovement","difference","Turn","MySquare","selected","OpenGame","userId","parseJwt","getAllByUser","games","selectGame","DraughtsService","http","get","API_END_POINT","game_name","creator","JSON","parse","token","getToken","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","c","charCodeAt","toString","slice","join","UserService","email","password","user","headers","getHeaders","window","sessionStorage","getItem","username","setItem","set","removeItem","LoginComponent","router","message","login","saveToken","navigate","statusText","ProfileComponent","confirmDelete","getUserProfile","updateUser","deleteUser","updateProfile","RegistrationComponent","repetedPassword","registration","register","WelcomeComponent","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {RegistrationComponent} from './users/register/registration.component';\r\nimport {LoginComponent} from './users/login/login.component';\r\nimport {ProfileComponent} from './users/profile/profile.component';\r\nimport {WelcomeComponent} from './welcome/welcome.component';\r\nimport {DialogGameBoard} from './game/controllers/dialog/DialogGameBoard.component';\r\nimport {OpenGame} from './playGame/openGame.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {path: 'signup', component: RegistrationComponent},\r\n  {path: 'login', component: LoginComponent},\r\n  {path: 'play', component: DialogGameBoard},\r\n  {path: 'playGame', component: OpenGame},\r\n  {path: 'profile', component: ProfileComponent},\r\n  {path: 'welcome', component: WelcomeComponent},\r\n  {path: '', redirectTo: 'welcome', pathMatch: 'full'},\r\n  { path: '**', component: WelcomeComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {\r\n}\r\n","import { Component } from '@angular/core';\r\nimport {UserService} from './services/user.service';\r\nimport {environment} from '../environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'draughts';\r\n  apiEndPoint: string;\r\n\r\n  constructor(public userService: UserService) {\r\n    this.apiEndPoint = environment.API;\r\n  }\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n  <a class=\"draughs\" routerLink=\"\"><span>Draughts</span></a>\r\n  <button class=\"menuLogin\" *ngIf=\"userService.isUserActive()\" mat-menu-item routerLink=\"profile\">\r\n    <span><mat-icon>account_circle</mat-icon> My Profile</span>\r\n  </button>\r\n  <button class=\"menuLogin\" *ngIf=\"userService.isUserActive()\" mat-menu-item routerLink=\"playGame\"><span>Play Game!</span></button>\r\n  <button class=\"menuButton\" mat-flat-button [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_vert</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n\r\n<mat-menu #menu=\"matMenu\">\r\n  <button mat-menu-item><span>Game</span></button>\r\n  <button mat-menu-item *ngIf=\"!userService.isUserActive()\" routerLink=\"signup\"><span>Sign up</span></button>\r\n  <button mat-menu-item *ngIf=\"userService.isUserActive()\" (click)=\"userService.logout()\" routerLink=\"/\"><span>Log out</span></button>\r\n</mat-menu>\r\n<main>\r\n  <router-outlet></router-outlet>\r\n</main>\r\n","import {BrowserModule} from '@angular/platform-browser';\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport {AppRoutingModule} from './app-routing.module';\r\nimport {AppComponent} from './app.component';\r\nimport {RegistrationComponent} from './users/register/registration.component';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {UserService} from './services/user.service';\r\nimport {HttpClientModule} from '@angular/common/http';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {LoginComponent} from './users/login/login.component';\r\nimport {ProfileComponent} from './users/profile/profile.component';\r\nimport {WelcomeComponent} from './welcome/welcome.component';\r\nimport {DialogGameBoard} from './game/controllers/dialog/DialogGameBoard.component';\r\nimport {MySquareComponent} from './game/controllers/mySquare.component';\r\nimport {DraughtComponent} from './game/controllers/pieces/draught.component';\r\nimport {PawnComponent} from './game/controllers/pieces/pawn.component';\r\nimport {GameService} from './game/game.service';\r\nimport {DraughtsService} from './services/draughts.service';\r\nimport {DialogGameName} from './game/controllers/dialog/DialogGameName.component';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {OpenGame} from './playGame/openGame.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    RegistrationComponent,\r\n    LoginComponent,\r\n    ProfileComponent,\r\n    WelcomeComponent,\r\n    DialogGameBoard,\r\n    MySquareComponent,\r\n    DraughtComponent,\r\n    PawnComponent,\r\n    DialogGameName,\r\n    OpenGame\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatToolbarModule,\r\n    HttpClientModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatDialogModule\r\n  ],\r\n  entryComponents: [\r\n    DialogGameName,\r\n    DialogGameBoard\r\n  ],\r\n  providers: [\r\n    UserService,\r\n    GameService,\r\n    DraughtsService\r\n  ],\r\n  bootstrap: [\r\n    AppComponent\r\n  ]\r\n})\r\nexport class AppModule {\r\n}\r\n","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MySquare} from '../../models/mySquare';\r\nimport {Color} from '../../models/Color';\r\nimport {GameService} from '../../game.service';\r\nimport {DraughtsService} from '../../../services/draughts.service';\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material/dialog';\r\nimport {DialogGameName} from './DialogGameName.component';\r\nimport {Pawn} from '../../models/Pawn';\r\nimport {Draught} from '../../models/Draught';\r\nimport {UserService} from '../../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-draughts',\r\n  templateUrl: '../../views/dialog/dialog-game-board.component.html',\r\n  styleUrls: ['../../views/dialog/dialog-game-board.component.css']\r\n})\r\nexport class DialogGameBoard implements OnInit {\r\n\r\n  boardDimension: MySquare[][];\r\n  gameName: string;\r\n\r\n  constructor(private gameService: GameService, private draughtsService: DraughtsService, private userService: UserService,\r\n              private dialog: MatDialog, public dialogRef: MatDialogRef<DialogGameName>,\r\n              @Inject(MAT_DIALOG_DATA) public data: any) {\r\n    this.gameName = null;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.data.gameName !== null) {\r\n      this.setBoard(this.data.board);\r\n      this.gameName = this.data.gameName;\r\n    } else {\r\n      this.gameService.resetGame();\r\n    }\r\n    this.boardDimension = this.gameService.getBoardView();\r\n  }\r\n\r\n  setBoard(board: string){\r\n    let position: number = 0;\r\n    for (let row = 0; row < this.gameService.getDimension(); row++) {\r\n      for (let column = 0; column < this.gameService.getDimension(); column++) {\r\n        if (board.charAt(position) === '_') {\r\n          this.gameService.setPiece(null, row, column);\r\n        } else if (board.charAt(position) === 'r') {\r\n          this.gameService.setPiece(new Pawn(Color.RED), row, column);\r\n        } else if (board.charAt(position) === 'R') {\r\n          this.gameService.setPiece(new Draught(Color.RED), row, column);\r\n        } else if (board.charAt(position) === 'n') {\r\n          this.gameService.setPiece(new Pawn(Color.BLACK), row, column);\r\n        } else if (board.charAt(position) === 'N') {\r\n          this.gameService.setPiece(new Draught(Color.BLACK), row, column);\r\n        }\r\n        position++;\r\n      }\r\n    }\r\n  }\r\n\r\n  getTurnColor(): Color {\r\n    return this.gameService.getTurnColor();\r\n  }\r\n\r\n  saveGame() {\r\n    if (this.gameName === null) {\r\n      this.openDialog();\r\n    } else {\r\n      this.draughtsService.put(this.gameName, this.gameService.toStringBoard(), this.gameService.getTurnColor()).subscribe(\r\n        data => {\r\n          alert('Game update');\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(DialogGameName, {\r\n      height: '250px',\r\n      width: '250px',\r\n      data: {gameName: this.gameName}\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      console.log('The dialog was closed');\r\n      this.gameName = result;\r\n      this.draughtsService.post(this.gameName, this.gameService.toStringBoard(), this.gameService.getTurnColor()).subscribe(\r\n        data => {\r\n          alert('Game saved');\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  logout(){\r\n    this.dialog.closeAll();\r\n    this.userService.logout();\r\n  }\r\n}\r\n","<div>\r\n  <p> Mueve:\r\n    <img *ngIf=\"this.getTurnColor() === 0\" src=\"./assets/images/red.png\"\r\n         class=\"turn\" alt=\"Red pieces turn\">\r\n    <img *ngIf=\"this.getTurnColor() === 1\" src=\"./assets/images/black.png\"\r\n         class=\"turn\" alt=\"Black pieces turn\">\r\n  </p>\r\n</div>\r\n<div>\r\n  <p>\r\n    <button (click)=\"logout()\" routerLink=\"/\">Logout!</button>\r\n  </p>\r\n</div>\r\n<div>\r\n  <p *ngIf=\"gameName !== null\"> {{gameName}}</p>\r\n  <p>\r\n    <button (click)=\"saveGame()\">Save Game</button>\r\n  </p>\r\n</div>\r\n<div class=\"board\">\r\n  <div *ngFor=\"let row of boardDimension\" class=\"fila\">\r\n    <app-board-square *ngFor=\"let column of row\" [square]=\"column\"></app-board-square>\r\n  </div>\r\n</div>\r\n","import {Component, Inject} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'dialog-game-name',\r\n  templateUrl: '../../views/dialog/dialog-game-name.html',\r\n})\r\nexport class DialogGameName {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DialogGameName>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<h1 mat-dialog-title>Game name</h1>\r\n<div mat-dialog-content>\r\n  <p>Name your game!</p>\r\n  <mat-form-field>\r\n    <mat-label>Game name</mat-label>\r\n    <input matInput [(ngModel)]=\"data.gameName\">\r\n  </mat-form-field>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button mat-button (click)=\"onNoClick()\">Cancel</button>\r\n  <button mat-button [mat-dialog-close]=\"data.gameName\" cdkFocusInitial>Ok</button>\r\n</div>\r\n","import {Component, Input} from '@angular/core';\r\nimport {MySquare} from '../models/mySquare';\r\nimport {GameService} from '../game.service';\r\nimport {Error} from '../models/Error';\r\n\r\n@Component({\r\n  selector: 'app-board-square',\r\n  templateUrl: '../views/mySquare.component.html',\r\n  styleUrls: ['../views/mySquare.component.css']\r\n})\r\nexport class MySquareComponent {\r\n\r\n  @Input() public square: MySquare;\r\n\r\n  constructor(private gameService: GameService) {\r\n  }\r\n\r\n  userMoves(): Error {\r\n    return this.gameService.userClicks(this.square.getPiece(), this.square.getRow(), this.square.getColumn());\r\n  }\r\n}\r\n","<div [class.playable]=\"square.getRow()%2 !== square.getColumn()%2\"\r\n     [class.notplayable]=\"square.getRow()%2 === square.getColumn()%2\"\r\n     [class.highlight]=\"square.isSelected()\">\r\n  <div (click)=\"userMoves()\" *ngIf=\"square.getRow()%2 !== square.getColumn()%2\">\r\n    <pawn\r\n      *ngIf=\"square.getPieceType() === 'n' || square.getPieceType() === 'r'\"\r\n      [pawn]=\"square.getPiece()\"></pawn>\r\n    <draught\r\n      *ngIf=\"square.getPieceType() === 'N' || square.getPieceType() === 'R'\"\r\n      [draught]=\"square.getPiece()\"></draught>\r\n    <img *ngIf=\"square.getPieceType() === ''\"\r\n         src=\"../../../assets/images/noPiece.png\"\r\n         class=\"noPawn\" alt=\"Empty square\">\r\n  </div>\r\n</div>\r\n","import {Component, Input} from '@angular/core';\r\nimport {Draught} from '../../models/Draught';\r\nimport {Color} from '../../models/Color';\r\n\r\n@Component({\r\n  selector: 'draught',\r\n  templateUrl: '../../views/pieces/draught.component.html',\r\n  styleUrls: ['../../views/pieces/piece.component.css']\r\n})\r\nexport class DraughtComponent {\r\n  @Input() draught: Draught;\r\n  BLACK = Color.BLACK;\r\n  RED = Color.RED;\r\n}\r\n","<div *ngIf=\"draught !== null\" class=\"divPiece\">\r\n  <img *ngIf=\"draught.getColor() === RED\" src=\"./assets/images/red_draught.png\"\r\n       class=\"piece\" alt=\"Red Draught\">\r\n  <img *ngIf=\"draught.getColor() === BLACK\" src=\"./assets/images/black_draught.png\"\r\n       class=\"piece\" alt=\"Black Draught\">\r\n</div>\r\n","import {Component, Input} from '@angular/core';\r\nimport {Pawn} from '../../models/Pawn';\r\nimport {Color} from '../../models/Color';\r\n\r\n@Component({\r\n  selector: 'pawn',\r\n  templateUrl: '../../views/pieces/pawn.component.html',\r\n  styleUrls: ['../../views/pieces/piece.component.css']\r\n})\r\nexport class PawnComponent {\r\n  @Input() pawn: Pawn;\r\n  BLACK = Color.BLACK;\r\n  RED = Color.RED;\r\n}\r\n","<div *ngIf=\"pawn !== null\" class=\"divPiece\">\r\n  <img *ngIf=\"pawn.getColor() === RED\" src=\"./assets/images/red.png\"\r\n       class=\"piece\" alt=\"Red Pawn\">\r\n  <img *ngIf=\"pawn.getColor() === BLACK\" src=\"./assets/images/black.png\"\r\n       class=\"piece\" alt=\"Black Pawn\">\r\n</div>\r\n","import {Injectable} from '@angular/core';\r\nimport {Piece} from './models/Piece';\r\nimport {Coordinate} from './models/Coordinate';\r\nimport {Game} from './models/Game';\r\nimport {Error, getErrorValues} from './models/Error';\r\nimport {MySquare} from './models/mySquare';\r\nimport {Pawn} from './models/Pawn';\r\nimport {Color, colorValues} from './models/Color';\r\nimport {Draught} from './models/Draught';\r\nimport {DirectionClass} from './models/DirectionClass';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GameService {\r\n\r\n  private piece: Piece;\r\n  private coordinate: Coordinate;\r\n  private game: Game;\r\n  private boardView: MySquare[][];\r\n  private pieceIsSelected: boolean;\r\n  private multiJump: boolean;\r\n\r\n  constructor() {\r\n    this.game = new Game();\r\n    this.piece = null;\r\n    this.coordinate = null;\r\n    this.pieceIsSelected = false;\r\n    this.resetGame();\r\n    this.multiJump = false;\r\n  }\r\n\r\n  public getBoardView(): MySquare[][] {\r\n    return this.boardView;\r\n  }\r\n\r\n  public resetGame() {\r\n    this.initBoard();\r\n    this.initTurn();\r\n  }\r\n\r\n  private initTurn() {\r\n    this.game.resetTurn();\r\n  }\r\n\r\n  private initBoard() {\r\n    this.boardView = [];\r\n    for (let i = 0; i < Coordinate.getDimension(); i++) {\r\n      this.boardView[i] = [];\r\n      for (let j = 0; j < Coordinate.getDimension(); j++) {\r\n        if (i % 2 !== j % 2) {\r\n          this.initialize(i, j);\r\n        } else {\r\n          this.boardView[i][j] = new MySquare(null, i, j);\r\n          this.setPiece(null, i, j);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initialize(row: number, column: number) {\r\n    if (row < 3) {\r\n      this.boardView[row][column] = new MySquare(new Pawn(Color.BLACK), row, column);\r\n      this.setPiece(new Pawn(Color.BLACK), row, column);\r\n    } else if (row > 4) {\r\n      this.boardView[row][column] = new MySquare(new Pawn(Color.RED), row, column);\r\n      this.setPiece(new Pawn(Color.RED), row, column);\r\n    } else {\r\n      this.boardView[row][column] = new MySquare(null, row, column);\r\n      this.setPiece(null, row, column);\r\n    }\r\n  }\r\n\r\n  private clearHighlightedPiece() {\r\n    if (this.coordinate !== null && !this.multiJump) {\r\n      this.boardView[this.coordinate.getRow()][this.coordinate.getColumn()].setSelected(false);\r\n    }\r\n  }\r\n\r\n  public userClicks(piece: Piece, row: number, column: number): Error {\r\n    this.clearHighlightedPiece();\r\n    if (piece !== null && !this.multiJump) {\r\n      this.boardView[row][column].setSelected(true);\r\n      this.piece = piece;\r\n      this.coordinate = new Coordinate(row, column);\r\n      this.pieceIsSelected = true;\r\n    } else if (piece === null && this.pieceIsSelected) {\r\n      return this.movePiece(new Coordinate(row, column));\r\n    } else if (this.multiJump) {\r\n      this.boardView[this.coordinate.getRow()][this.coordinate.getColumn()].setSelected(true);\r\n    } else {\r\n      this.pieceIsSelected = false;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private getSquarePiece(): MySquare {\r\n    let mySquare: MySquare = null;\r\n    this.boardView.forEach(row => row.forEach(square => {\r\n      if (square.getPiece() === this.piece) {\r\n        mySquare = square;\r\n      }\r\n    }));\r\n    return mySquare;\r\n  }\r\n\r\n  private putPiece(coordinate: Coordinate) {\r\n    this.boardView[coordinate.getRow()][coordinate.getColumn()].put(this.piece);\r\n  }\r\n\r\n  private movePiece(target: Coordinate): Error {\r\n    let error: Error = this.game.move([this.coordinate, target]);\r\n    if (error === null) {\r\n      this.getSquarePiece().clearPiece();\r\n      this.putPiece(target);\r\n      let direction: DirectionClass = this.coordinate.getDirection(target);\r\n      if (this.coordinate.getDiagonalCoordinate(direction, 2).equals(target)) {\r\n        this.clearJumpedPiece(this.coordinate.getDiagonalCoordinate(direction, 1));\r\n      }\r\n      this.multiJump = this.game.isMultiJumpPossible(target) && this.coordinate.getDiagonalDistance(target) === 2;\r\n      if (this.multiJump) {\r\n        this.prepareForMultiJump(target);\r\n        return;\r\n      } else {\r\n        this.transformPawnToDraught(target);\r\n        this.prepareForNextMovement();\r\n      }\r\n    } else {\r\n      alert(getErrorValues()[error]);\r\n    }\r\n    this.checkGameIsFinished();\r\n    return error;\r\n  }\r\n\r\n  private prepareForNextMovement(){\r\n    this.pieceIsSelected = false;\r\n    this.boardView[this.coordinate.getRow()][this.coordinate.getColumn()].setSelected(false);\r\n  }\r\n\r\n  private checkGameIsFinished(){\r\n    if (this.game.isBlocked()) {\r\n      alert('Fin del juego, el ganador es: ' + colorValues()[this.game.getOppositeTurnColor()]);\r\n    }\r\n  }\r\n\r\n  private prepareForMultiJump(target: Coordinate){\r\n    this.boardView[this.coordinate.getRow()][this.coordinate.getColumn()].setSelected(false);\r\n    this.boardView[target.getRow()][target.getColumn()].setSelected(true);\r\n    this.game.changeTurnToAllowMultiJump();\r\n    this.coordinate = target;\r\n  }\r\n\r\n  private transformPawnToDraught(coordinate: Coordinate) {\r\n    if (this.game.getPiece(coordinate).getCode() === 'N' && coordinate.isLast()) {\r\n      this.boardView[coordinate.getRow()][coordinate.getColumn()].put(new Draught(Color.BLACK));\r\n    } else if (this.game.getPiece(coordinate).getCode() === 'R' && coordinate.isFirst()) {\r\n      this.boardView[coordinate.getRow()][coordinate.getColumn()].put(new Draught(Color.RED));\r\n    }\r\n  }\r\n\r\n  private clearJumpedPiece(coordinate: Coordinate) {\r\n    this.boardView[coordinate.getRow()][coordinate.getColumn()].put(null);\r\n  }\r\n\r\n  public getPiece(): Piece {\r\n    return this.piece;\r\n  }\r\n\r\n  public getTurnColor(): Color {\r\n    return this.game.getTurnColor();\r\n  }\r\n\r\n  public isPieceSelected(): boolean {\r\n    return this.pieceIsSelected;\r\n  }\r\n\r\n  public isMultiJump(): boolean {\r\n    return this.multiJump;\r\n  }\r\n\r\n  public setPiece(piece: Piece, row: number, column: number) {\r\n    this.boardView[row][column].setPiece(piece);\r\n    this.game.changePiece(piece, row, column);\r\n  }\r\n\r\n  public getNumberOfPieces(color: Color): number {\r\n    return this.game.getNumberOfPieces(color);\r\n  }\r\n\r\n  public getDimension(): number {\r\n    return Coordinate.getDimension();\r\n  }\r\n\r\n  public toStringBoard(): string {\r\n    let string: string = '';\r\n    for (let i = 0; i < Coordinate.getDimension(); i++) {\r\n      for (let j = 0; j < Coordinate.getDimension(); j++) {\r\n        if (this.boardView[i][j].getPiece() === null) {\r\n          string += '_';\r\n        } else {\r\n          string += this.boardView[i][j].getPiece().getCode();\r\n        }\r\n      }\r\n    }\r\n    return string;\r\n  }\r\n}\r\n","import {Piece} from './Piece';\r\nimport {Coordinate} from './Coordinate';\r\nimport {Color} from './Color';\r\nimport {DirectionClass} from './DirectionClass';\r\n\r\nexport class Board {\r\n\r\n  private pieces: Piece[][];\r\n\r\n  private static readonly MAXIMUM_LIMIT_TO_JUMP = Coordinate.getDimension() - 2;\r\n\r\n  private static readonly MINIMUM_LIMIT_TO_JUMP = 1;\r\n\r\n  constructor() {\r\n    this.pieces = [];\r\n    for (let i = 0; i < Coordinate.getDimension(); i++) {\r\n      this.pieces[i] = [];\r\n      for (let j = 0; j < Coordinate.getDimension(); j++) {\r\n        this.pieces[i][j] = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  getPiece(coordinate: Coordinate): Piece {\r\n    if (coordinate === null) {\r\n      return null;\r\n    }\r\n    return this.pieces[coordinate.getRow()][coordinate.getColumn()];\r\n  }\r\n\r\n  setPiece(piece: Piece, row: number, column: number) {\r\n    this.pieces[row][column] = piece;\r\n  }\r\n\r\n  put(coordinate: Coordinate, piece: Piece) {\r\n    if (coordinate !== null) {\r\n      this.pieces[coordinate.getRow()][coordinate.getColumn()] = piece;\r\n    }\r\n  }\r\n\r\n  remove(coordinate: Coordinate): Piece {\r\n    if (this.getPiece(coordinate) === null) {\r\n      return null;\r\n    }\r\n    let piece: Piece = this.getPiece(coordinate);\r\n    this.put(coordinate, null);\r\n    return piece;\r\n  }\r\n\r\n  move(origin: Coordinate, target: Coordinate) {\r\n    if (this.getPiece(origin) !== null) {\r\n      this.put(target, this.remove(origin));\r\n    }\r\n  }\r\n\r\n  getBetweenDiagonalPieces(origin: Coordinate, target: Coordinate): Array<Piece> {\r\n    let betweenDiagonalPieces: Array<Piece> = new Array<Piece>();\r\n    if (origin.isOnDiagonal(target)) {\r\n      for (let coordinate of origin.getBetweenDiagonalCoordinates(target)) {\r\n        let piece: Piece = this.getPiece(coordinate);\r\n        if (piece != null) {\r\n          betweenDiagonalPieces.push(piece);\r\n        }\r\n      }\r\n    }\r\n    return betweenDiagonalPieces;\r\n  }\r\n\r\n  getColor(coordinate: Coordinate): Color {\r\n    const piece: Piece = this.getPiece(coordinate);\r\n    if (piece === null) {\r\n      return null;\r\n    }\r\n    return piece.getColor();\r\n  }\r\n\r\n  isEmpty(coordinate: Coordinate): boolean {\r\n    return this.getPiece(coordinate) === null;\r\n  }\r\n\r\n  getAvailablePiecesToJump(coordinate: Coordinate): Array<Coordinate> {\r\n    let availablePiecesToJump: Array<Coordinate> = new Array<Coordinate>();\r\n    let color = this.getPiece(coordinate).getColor();\r\n    this.checkDiagonals(availablePiecesToJump, color, coordinate);\r\n    return availablePiecesToJump;\r\n  }\r\n\r\n  checkDiagonals(availablePiecesToJump: Array<Coordinate>, color: Color, coordinate: Coordinate) {\r\n    if (color === Color.RED && coordinate.getRow() > Board.MINIMUM_LIMIT_TO_JUMP) {\r\n      if (coordinate.getColumn() < Board.MAXIMUM_LIMIT_TO_JUMP && this.jumpIsPossible(coordinate, DirectionClass.SE)) {\r\n        availablePiecesToJump.push(coordinate);\r\n      }\r\n      if (coordinate.getColumn() > Board.MINIMUM_LIMIT_TO_JUMP && this.jumpIsPossible(coordinate, DirectionClass.SW)) {\r\n        availablePiecesToJump.push(coordinate);\r\n      }\r\n    }\r\n    if (color === Color.BLACK && coordinate.getRow() < Board.MAXIMUM_LIMIT_TO_JUMP) {\r\n      if (coordinate.getColumn() > Board.MINIMUM_LIMIT_TO_JUMP && this.jumpIsPossible(coordinate, DirectionClass.NW)) {\r\n        availablePiecesToJump.push(coordinate);\r\n      }\r\n      if (coordinate.getColumn() < Board.MAXIMUM_LIMIT_TO_JUMP && this.jumpIsPossible(coordinate, DirectionClass.NE)) {\r\n        availablePiecesToJump.push(coordinate);\r\n      }\r\n    }\r\n  }\r\n\r\n  jumpIsPossible(coordinate: Coordinate, direction: DirectionClass): boolean {\r\n    return this.getPiece(coordinate.getDiagonalCoordinate(direction, 1)) !== null\r\n      && this.getColor(coordinate.getDiagonalCoordinate(direction, 1)) !== this.getColor(coordinate)\r\n      && this.getPiece(coordinate.getDiagonalCoordinate(direction, 2)) === null;\r\n  }\r\n\r\n  getNumberOfPieces(color: Color): number {\r\n    let result: number = 0;\r\n    for (let i: number = 0; i < Coordinate.getDimension(); i++) {\r\n      for (let j: number = 0; j < Coordinate.getDimension(); j++) {\r\n        if (this.pieces[i][j] != null) {\r\n          if (this.pieces[i][j].getColor() === color) {\r\n            result++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  impresion() {\r\n    let string: string = '';\r\n    for (let i = 0; i < Coordinate.getDimension(); i++) {\r\n      for (let j = 0; j < Coordinate.getDimension(); j++) {\r\n        if (this.pieces[i][j] === null) {\r\n          string += '_';\r\n        } else {\r\n          string += this.pieces[i][j].getCode();\r\n        }\r\n      }\r\n    }\r\n    return string;\r\n\r\n  }\r\n\r\n}\r\n","import {Coordinate} from './Coordinate';\r\n\r\nexport enum Color {\r\n  RED,\r\n  BLACK\r\n}\r\n\r\nconst LIMITS: number[] = [5, 2];\r\nconst StringIsNumber = value => isNaN(Number(value)) === false;\r\n\r\nfunction getColor(row: number): Color {\r\n  if (row >= LIMITS[Color.RED.valueOf()]) {\r\n    return Color.RED;\r\n  } else if (row <= LIMITS[Color.BLACK.valueOf()]) {\r\n    return Color.BLACK;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function colorGetInitialColor(coordinate: Coordinate): Color {\r\n  if (coordinate.isBlack()) {\r\n    return getColor(coordinate.getRow());\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function getColorValue(color: number): Color {\r\n  if (color === 0) {\r\n    return Color.RED;\r\n  }\r\n  if (color === 1) {\r\n    return Color.BLACK;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function colorValues() {\r\n  return Object.keys(Color)\r\n    .filter(StringIsNumber)\r\n    .map(key => Color[key]);\r\n}\r\n","import {DirectionClass} from './DirectionClass';\r\n\r\nexport class Coordinate {\r\n  private row: number;\r\n  private column: number;\r\n  private static readonly LOWER_LIMIT: number = 0;\r\n  private static readonly UPPER_LIMIT: number = 7;\r\n  private static readonly DIMENSION: number = Coordinate.UPPER_LIMIT + 1;\r\n\r\n  constructor(row: number, column: number) {\r\n    this.row = row;\r\n    this.column = column;\r\n  }\r\n\r\n  private isWithIn(): boolean {\r\n    return Coordinate.LOWER_LIMIT <= this.row && this.row <= Coordinate.UPPER_LIMIT\r\n      && Coordinate.LOWER_LIMIT <= this.column && this.column <= Coordinate.UPPER_LIMIT;\r\n  }\r\n\r\n  private subtract(coordinate: Coordinate): Coordinate {\r\n    return new Coordinate(this.row - coordinate.row, this.column - coordinate.column);\r\n  }\r\n\r\n  private plus(coordinate: Coordinate): Coordinate {\r\n    return new Coordinate(this.row + coordinate.row, this.column + coordinate.column);\r\n  }\r\n\r\n  public getDirection(coordinate: Coordinate): DirectionClass {\r\n    if (coordinate === null) {\r\n      return null;\r\n    }\r\n    let substract: Coordinate = coordinate.subtract(this);\r\n    for (let direction of DirectionClass.values()) {\r\n      if (direction.isOnDirection(substract)) {\r\n        return direction;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public isOnDiagonal(coordinate: Coordinate): boolean {\r\n    return this.getDirection(coordinate) != null;\r\n  }\r\n\r\n  public getDiagonalDistance(coordinate: Coordinate): number {\r\n    if (!this.isOnDiagonal(coordinate)) {\r\n      return null;\r\n    }\r\n    return Math.abs(this.subtract(coordinate).getRow());\r\n  }\r\n\r\n  private getDistanceCoordinate(direction: DirectionClass, distance: number): Coordinate {\r\n    return new Coordinate(direction.getDistanceCoordinateRow(distance), direction.getDistanceCoordinateColumn(distance));\r\n  }\r\n\r\n  public getBetweenDiagonalCoordinates(coordinate: Coordinate): Array<Coordinate> {\r\n    if (!this.isOnDiagonal(coordinate)) {\r\n      return null;\r\n    }\r\n    let coordinates: Array<Coordinate> = new Array<Coordinate>();\r\n    let direction: DirectionClass = this.getDirection(coordinate);\r\n    let cursor: Coordinate = this.plus(this.getDistanceCoordinate(direction, 1));\r\n    while (!cursor.equals(coordinate)) {\r\n      coordinates.push(cursor);\r\n      cursor = cursor.plus(this.getDistanceCoordinate(direction, 1));\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  public equals(coordinate: Coordinate) {\r\n    return this.getRow() === coordinate.getRow() && this.getColumn() === coordinate.getColumn();\r\n  }\r\n\r\n  public getDiagonalCoordinates(level: number): Array<Coordinate> {\r\n    let diagonalCoordinates: Array<Coordinate> = new Array<Coordinate>();\r\n    for (let direction of DirectionClass.values()) {\r\n      let diagonalCoordinate: Coordinate = this.plus(this.getDistanceCoordinate(direction, level));\r\n      if (diagonalCoordinate !== null && diagonalCoordinate.isWithIn()) {\r\n        diagonalCoordinates.push(diagonalCoordinate);\r\n      }\r\n    }\r\n    return diagonalCoordinates;\r\n  }\r\n\r\n  public getDiagonalCoordinate(direction: DirectionClass, level: number): Coordinate {\r\n    return this.plus(this.getDistanceCoordinate(direction, level));\r\n  }\r\n\r\n  public isBlack(): boolean {\r\n    return (this.row + this.column) % 2 != 0;\r\n  }\r\n\r\n  public isLast(): boolean {\r\n    return this.row == Coordinate.UPPER_LIMIT;\r\n  }\r\n\r\n  public isFirst(): boolean {\r\n    return this.row == Coordinate.LOWER_LIMIT;\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.row;\r\n  }\r\n\r\n  public getColumn(): number {\r\n    return this.column;\r\n  }\r\n\r\n  public static getDimension(): number {\r\n    return Coordinate.DIMENSION;\r\n  }\r\n\r\n}\r\n","import {Coordinate} from \"./Coordinate\";\r\n\r\nexport class DirectionClass {\r\n  public static readonly NE = new DirectionClass(1,1);\r\n  public static readonly SE = new DirectionClass(-1,1);\r\n  public static readonly SW = new DirectionClass(-1,-1);\r\n  public static readonly NW = new DirectionClass(1,-1);\r\n\r\n  private readonly horizontalShift: number;\r\n  private readonly verticalShift: number;\r\n\r\n  private constructor(horizontalShift: number, verticalShift: number) {\r\n    this.horizontalShift = horizontalShift;\r\n    this.verticalShift = verticalShift;\r\n  }\r\n\r\n  isOnDirection(coordinate: Coordinate): boolean{\r\n    if (Math.abs(coordinate.getRow()) != Math.abs(coordinate.getColumn()))\r\n      return false;\r\n    if (coordinate.getRow()==0)\r\n      return false;\r\n    if (this.horizontalShift * coordinate.getRow() < 0)\r\n      return false;\r\n    if (this.verticalShift * coordinate.getColumn() < 0)\r\n      return false;\r\n    return true;\r\n  }\r\n\r\n  getDistanceCoordinateRow(distance: number): number{\r\n    return this.horizontalShift * distance;\r\n  }\r\n\r\n  getDistanceCoordinateColumn(distance: number): number{\r\n    return this.verticalShift * distance;\r\n  }\r\n\r\n  static values(): Array<DirectionClass>{\r\n    return [DirectionClass.NE, DirectionClass.SE, DirectionClass.SW, DirectionClass.NW];\r\n  }\r\n}\r\n\r\nenum EnumDirection {\r\n  NE,\r\n  SE,\r\n  SW,\r\n  NW\r\n}\r\n\r\nexport const Direction = new Map<DirectionClass, EnumDirection>([\r\n  [DirectionClass.NE, EnumDirection.NE],\r\n  [DirectionClass.SE, EnumDirection.SE],\r\n  [DirectionClass.SW, EnumDirection.SW],\r\n  [DirectionClass.NW, EnumDirection.NW]\r\n]);\r\n","import {Piece} from './Piece';\r\nimport {Coordinate} from './Coordinate';\r\nimport {Error} from './Error';\r\n\r\nexport class Draught extends Piece {\r\n\r\n  private static readonly CODES: string[] = ['R', 'N'];\r\n  private static readonly MAX_DISTANCE_JUMP: number = 2;\r\n\r\n  isCorrectDiagonalMovement(pieceAmountBetweenCoordinates: number, pair: number, coordinates: Coordinate[]): Error {\r\n    let distance: number = Number(coordinates[pair].getDiagonalDistance(coordinates[pair + 1]));\r\n    if (distance > Draught.MAX_DISTANCE_JUMP && pieceAmountBetweenCoordinates === 1) {\r\n      return Error.TOO_MUCH_DISTANCE_TO_JUMP;\r\n    }\r\n    if (pieceAmountBetweenCoordinates > 1) {\r\n      return Error.TOO_MUCH_EATINGS;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getCode(): string {\r\n    return Draught.CODES[this.color.valueOf()];\r\n  }\r\n\r\n\r\n}\r\n","export enum Error {\r\n  BAD_FORMAT,\r\n  EMPTY_ORIGIN,\r\n  OPPOSITE_PIECE,\r\n  NOT_DIAGONAL,\r\n  NOT_EMPTY_TARGET,\r\n  NOT_ADVANCED,\r\n  WITHOUT_EATING,\r\n  COLLEAGUE_EATING,\r\n  TOO_MUCH_ADVANCED,\r\n  TOO_MUCH_EATINGS,\r\n  TOO_MUCH_JUMPS,\r\n  TOO_MUCH_DISTANCE_TO_JUMP\r\n}\r\n\r\nconst StringIsNumber = value => isNaN(Number(value)) === false;\r\n\r\nexport function getErrorValues() {\r\n  return Object.keys(Error)\r\n    .filter(StringIsNumber)\r\n    .map(key => Error[key]);\r\n}\r\n","import {Board} from './Board';\r\nimport {Turn} from './Turn';\r\nimport {Coordinate} from './Coordinate';\r\nimport {Color, colorGetInitialColor} from './Color';\r\nimport {Piece} from './Piece';\r\nimport {Pawn} from './Pawn';\r\nimport {Error} from './Error';\r\nimport {Draught} from './Draught';\r\n\r\nexport class Game {\r\n\r\n  private board: Board;\r\n  private turn: Turn;\r\n\r\n  constructor() {\r\n    this.board = new Board();\r\n    this.turn = new Turn();\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    for (let i = 0; i < Coordinate.getDimension(); i++) {\r\n      for (let j = 0; j < Coordinate.getDimension(); j++) {\r\n        let coordinate: Coordinate = new Coordinate(i, j);\r\n        let color: Color = colorGetInitialColor(coordinate);\r\n        let piece: Piece = null;\r\n        if (color != null) {\r\n          piece = new Pawn(color);\r\n        }\r\n        this.board.put(coordinate, piece);\r\n      }\r\n    }\r\n    if (this.turn.getColor() !== Color.RED) {\r\n      this.turn.change();\r\n    }\r\n  }\r\n\r\n  move(coordinates: Array<Coordinate>): Error {\r\n    let error: Error = null;\r\n    let removedCoordinates: Array<Coordinate> = new Array<Coordinate>();\r\n    let pair: number = 0;\r\n    do {\r\n      error = this.isCorrectPairMove(pair, coordinates);\r\n      if (error == null) {\r\n        this.pairMove(removedCoordinates, pair, coordinates);\r\n        pair++;\r\n      }\r\n    } while (pair < coordinates.length - 1 && error == null);\r\n    error = this.isCorrectGlobalMove(error, removedCoordinates, coordinates);\r\n    if (error == null) {\r\n      this.turn.change();\r\n    } else {\r\n      this.unMovesUntilPair(removedCoordinates, pair, coordinates);\r\n    }\r\n    return error;\r\n  }\r\n\r\n  private isCorrectPairMove(pair: number, coordinates: Array<Coordinate>): Error {\r\n    if (coordinates[pair] === null || coordinates[pair + 1] === null) {\r\n      return Error.BAD_FORMAT;\r\n    }\r\n    if (this.board.isEmpty(coordinates[pair])) {\r\n      return Error.EMPTY_ORIGIN;\r\n    }\r\n    if (this.turn.getOppositeColor() === this.board.getColor(coordinates[pair])) {\r\n      return Error.OPPOSITE_PIECE;\r\n    }\r\n    if (!this.board.isEmpty(coordinates[pair + 1])) {\r\n      return Error.NOT_EMPTY_TARGET;\r\n    }\r\n    let betweenDiagonalPieces: Array<Piece> = this.board.getBetweenDiagonalPieces(coordinates[pair], coordinates[pair + 1]);\r\n    return this.board.getPiece(coordinates[pair]).isCorrectMovement(betweenDiagonalPieces, pair, coordinates);\r\n  }\r\n\r\n  private pairMove(removedCoordinates: Array<Coordinate>, pair: number, coordinates: Array<Coordinate>) {\r\n    let forRemoving: Coordinate = this.getBetweenDiagonalPiece(pair, coordinates);\r\n    if (forRemoving !== null) {\r\n      removedCoordinates.unshift(forRemoving);\r\n      this.board.remove(forRemoving);\r\n    }\r\n    this.board.move(coordinates[pair], coordinates[pair + 1]);\r\n    if (this.board.getPiece(coordinates[pair + 1]).isLimit(coordinates[pair + 1])) {\r\n      let color: Color = this.board.getColor(coordinates[pair + 1]);\r\n      this.board.remove(coordinates[pair + 1]);\r\n      this.board.put(coordinates[pair + 1], new Draught(color));\r\n    }\r\n  }\r\n\r\n  private getBetweenDiagonalPiece(pair: number, coordinates: Array<Coordinate>): Coordinate {\r\n    if (!coordinates[pair].isOnDiagonal(coordinates[pair + 1])) {\r\n      return null;\r\n    }\r\n    let betweenCoordinates: Array<Coordinate> = coordinates[pair].getBetweenDiagonalCoordinates(coordinates[pair + 1]);\r\n    if (betweenCoordinates.length === 0) {\r\n      return null;\r\n    }\r\n    for (let coordinate of betweenCoordinates) {\r\n      if (this.getPiece(coordinate) !== null) {\r\n        return coordinate;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private isCorrectGlobalMove(error: Error, removedCoordinates: Array<Coordinate>, coordinates: Array<Coordinate>): Error {\r\n    if (error !== null) {\r\n      return error;\r\n    }\r\n    if (coordinates.length > 2 && coordinates.length > removedCoordinates.length + 1) {\r\n      return Error.TOO_MUCH_JUMPS;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private unMovesUntilPair(removedCoordinates: Array<Coordinate>, pair: number, coordinates: Array<Coordinate>) {\r\n    for (let j = pair; j > 0; j--) {\r\n      this.board.move(coordinates[j], coordinates[j - 1]);\r\n    }\r\n    for (let removedPiece of removedCoordinates) {\r\n      this.board.put(removedPiece, new Pawn(this.getOppositeTurnColor()));\r\n    }\r\n  }\r\n\r\n  public isBlocked(): boolean {\r\n    for (let coordinate of this.getCoordinatesWithActualColor()) {\r\n      if (!this.isBlockedCoordinate(coordinate)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private getCoordinatesWithActualColor(): Array<Coordinate> {\r\n    let coordinates: Array<Coordinate> = new Array<Coordinate>();\r\n    for (let i = 0; i < this.getDimension(); i++) {\r\n      for (let j = 0; j < this.getDimension(); j++) {\r\n        let coordinate: Coordinate = new Coordinate(i, j);\r\n        let piece: Piece = this.getPiece(coordinate);\r\n        if (piece != null && piece.getColor() == this.getTurnColor()) {\r\n          coordinates.push(coordinate);\r\n        }\r\n      }\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  private isBlockedCoordinate(coordinate: Coordinate): boolean {\r\n    for (let i = 1; i <= 2; i++) {\r\n      for (let target of coordinate.getDiagonalCoordinates(i)) {\r\n        if (this.isCorrectPairMove(0, [coordinate, target]) === null) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public cancel() {\r\n    for (let coordinate of this.getCoordinatesWithActualColor()) {\r\n      this.board.remove(coordinate);\r\n    }\r\n    this.turn.change();\r\n  }\r\n\r\n  public getColor(coordinate: Coordinate): Color {\r\n    if (coordinate === null) {\r\n      return null;\r\n    }\r\n    return this.board.getColor(coordinate);\r\n  }\r\n\r\n  public getTurnColor(): Color {\r\n    return this.turn.getColor();\r\n  }\r\n\r\n  public resetTurn(){\r\n    this.turn.resetColor()\r\n  }\r\n\r\n  public getOppositeTurnColor(): Color {\r\n    return this.turn.getOppositeColor();\r\n  }\r\n\r\n  public getPiece(coordinate: Coordinate): Piece {\r\n    if (coordinate === null) {\r\n      return null;\r\n    }\r\n    return this.board.getPiece(coordinate);\r\n  }\r\n\r\n  public isMultiJumpPossible(coordinate: Coordinate) {\r\n    if (this.board.getAvailablePiecesToJump(coordinate).length === 0) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public getNumberOfPieces(color: Color): number {\r\n    return this.board.getNumberOfPieces(color);\r\n  }\r\n\r\n  public getDimension(): number {\r\n    return Coordinate.getDimension();\r\n  }\r\n\r\n  public changeTurnToAllowMultiJump(){\r\n    this.turn.change();\r\n  }\r\n\r\n  public changePiece(piece: Piece, row: number, column: number){\r\n    this.board.setPiece(piece, row, column);\r\n  }\r\n\r\n  public imprimir(){\r\n    this.board.impresion();\r\n  }\r\n}\r\n","import {Piece} from \"./Piece\";\r\nimport {Color} from \"./Color\";\r\nimport {Coordinate} from \"./Coordinate\";\r\nimport {Error} from \"./Error\";\r\n\r\nexport class Pawn extends Piece{\r\n\r\n  private static readonly CODES: string[] = ['r', 'n'];\r\n  private static readonly MAX_DISTANCE: number = 2;\r\n\r\n  constructor(color: Color) {\r\n    super(color);\r\n  }\r\n\r\n  isCorrectDiagonalMovement(pieceAmountBetweenCoordinates: number, pair: number, coordinates: Coordinate[]): Error {\r\n    if (!this.isAdvanced(coordinates[pair], coordinates[pair+1]))\r\n      return Error.NOT_ADVANCED;\r\n    let  distance: number = Number(coordinates[pair].getDiagonalDistance(coordinates[pair+1]));\r\n    if (distance > Pawn.MAX_DISTANCE)\r\n      return Error.TOO_MUCH_ADVANCED;\r\n    if (distance === Pawn.MAX_DISTANCE && pieceAmountBetweenCoordinates !== 1)\r\n      return Error.WITHOUT_EATING;\r\n    return null;\r\n  }\r\n\r\n  getCode(): string {\r\n    return Pawn.CODES[this.color.valueOf()];\r\n  }\r\n\r\n\r\n}\r\n","import {Color} from \"./Color\";\r\nimport {Coordinate} from \"./Coordinate\";\r\nimport {Error} from './Error';\r\n\r\nexport abstract class Piece {\r\n\r\n  protected color: Color;\r\n\r\n  constructor(color: Color) {\r\n    if (color !== null)\r\n      this.color = color;\r\n  }\r\n\r\n  isCorrectMovement(betweenDiagonalPieces: Array<Piece>, pair: number, coordinates: Coordinate[]): Error {\r\n    if (coordinates[pair] === null)\r\n      if (coordinates[pair + 1] === null)\r\n        return Error.BAD_FORMAT;\r\n    if (!coordinates[pair].isOnDiagonal(coordinates[pair + 1]))\r\n      return Error.NOT_DIAGONAL;\r\n    for (let piece of betweenDiagonalPieces)\r\n      if (this.color == piece.getColor())\r\n        return Error.COLLEAGUE_EATING;\r\n    return this.isCorrectDiagonalMovement(betweenDiagonalPieces.length, pair, coordinates);\r\n  }\r\n\r\n  abstract isCorrectDiagonalMovement(amountBetweenDiagonalPieces: number, pair: number, coordinates: Coordinate[]): Error;\r\n\r\n  isAdvanced(origin: Coordinate, target: Coordinate): boolean {\r\n    if (origin === null || target === null)\r\n      return false;\r\n    let difference: number = origin.getRow() - target.getRow();\r\n    if (this.color == Color.RED)\r\n      return difference > 0;\r\n    return difference < 0;\r\n  }\r\n\r\n  isLimit(coordinate: Coordinate): boolean {\r\n    return coordinate.isFirst() && this.getColor() === Color.RED\r\n      || coordinate.isLast() && this.getColor() === Color.BLACK;\r\n  }\r\n\r\n  getColor(): Color {\r\n    return this.color;\r\n  }\r\n\r\n  abstract getCode():string;\r\n}\r\n","import {Color, getColorValue} from './Color';\r\n\r\nexport class Turn {\r\n\r\n  private color: Color;\r\n\r\n  constructor() {\r\n    this.color = Color.RED;\r\n  }\r\n\r\n  change(){\r\n    this.color = this.getOppositeColor();\r\n  }\r\n\r\n  getOppositeColor(): Color{\r\n    return getColorValue(Number(this.color.valueOf() + 1) % 2);\r\n  }\r\n\r\n  getColor() : Color{\r\n    return this.color;\r\n  }\r\n\r\n  public resetColor(){\r\n    this.color = Color.RED;\r\n  }\r\n}\r\n","import {Piece} from './Piece';\r\n\r\nexport class MySquare {\r\n  private row: number;\r\n  private column: number;\r\n  private piece: Piece;\r\n  private selected: boolean;\r\n\r\n  constructor(piece: Piece, row: number, column: number) {\r\n    this.row = row;\r\n    this.column = column;\r\n    this.piece = piece;\r\n    this.selected = false;\r\n  }\r\n\r\n  getRow(): number {\r\n    return this.row;\r\n  }\r\n\r\n  getColumn(): number {\r\n    return this.column;\r\n  }\r\n\r\n  public getPiece(): Piece {\r\n    return this.piece;\r\n  }\r\n\r\n  public getPieceType(): string {\r\n    if (this.piece === null) {\r\n      return '';\r\n    }\r\n    return this.piece.getCode();\r\n  }\r\n\r\n  public setSelected(value: boolean) {\r\n    this.selected = value;\r\n  }\r\n\r\n  public isSelected(): boolean {\r\n    return this.selected;\r\n  }\r\n\r\n  clearPiece() {\r\n    this.piece = null;\r\n  }\r\n\r\n  put(piece: Piece) {\r\n    this.piece = piece;\r\n  }\r\n\r\n  setPiece(piece: Piece) {\r\n    this.piece = piece;\r\n  }\r\n}\r\n","import {Component} from '@angular/core';\r\nimport {DraughtsModel} from '../models/Draughts.model';\r\nimport {DraughtsService} from '../services/draughts.service';\r\nimport {DialogGameBoard} from '../game/controllers/dialog/DialogGameBoard.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-open-game',\r\n  templateUrl: './openGame.component.html'\r\n})\r\nexport class OpenGame {\r\n\r\n  public games: DraughtsModel[];\r\n  private userId;\r\n\r\n  constructor(private draughtsService: DraughtsService, private dialog: MatDialog) {\r\n    this.userId = this.draughtsService.parseJwt()['_id'];\r\n    this.draughtsService.getAllByUser(this.userId).subscribe(data => {\r\n      this.games = data;\r\n    });\r\n  }\r\n\r\n  selectGame(gameName: string, board: string){\r\n    const dialogRef = this.dialog.open(DialogGameBoard, {\r\n      height: '600px',\r\n      width: '1500px',\r\n      data: {gameName: gameName, board: board}\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      this.draughtsService.getAllByUser(this.userId).subscribe(data => {\r\n        this.games = data;\r\n      });\r\n    });\r\n  }\r\n}\r\n","<div>\r\n  <p>New game!</p>\r\n  <button (click)=\"selectGame(null, null)\">Select</button>\r\n</div>\r\n<table>\r\n  <caption>Games to Play</caption>\r\n  <tr>\r\n    <th scope=\"col\">Game Name</th>\r\n    <th scope=\"col\">Date</th>\r\n    <th scope=\"col\"></th>\r\n  </tr>\r\n  <tr *ngFor=\"let game of games\">\r\n    <td>{{ game.game_name}}</td>\r\n    <td> {{ game.date }}</td>\r\n    <td>\r\n      <button (click)=\"selectGame(game.game_name, game.board)\">Select</button>\r\n    </td>\r\n  </tr>\r\n</table>\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DraughtsModel} from '../models/Draughts.model';\r\nimport {UserService} from './user.service';\r\nimport {environment} from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DraughtsService {\r\n\r\n  static API_END_POINT = environment.API;\r\n\r\n  constructor(private http: HttpClient, private userService: UserService) {\r\n  }\r\n\r\n  get(){\r\n    return this.http.get<DraughtsModel[]>(DraughtsService.API_END_POINT + '/draughts');\r\n  }\r\n\r\n  getAllByUser(userId: string){\r\n    return this.http.get<DraughtsModel[]>(DraughtsService.API_END_POINT + '/draughts/user/' + userId);\r\n  }\r\n\r\n  post(game_name: string, board: string, turn: number){\r\n    const creator = this.parseJwt()['_id'];\r\n    const game = '{' +\r\n      '\"game_name\": \"' + game_name + '\", ' +\r\n      '\"board\": \"' + board + '\", ' +\r\n      '\"creator\": \"' + creator + '\", ' +\r\n      '\"turn\":\"' + turn + '\"}';\r\n    return this.http.post<DraughtsModel>(DraughtsService.API_END_POINT + '/draughts', JSON.parse(game));\r\n  }\r\n\r\n  put(game_name: string, board: string, turn: number){\r\n    const game = '{' +\r\n      '\"board\": \"' + board + '\", ' +\r\n      '\"turn\":\"' + turn + '\"}';\r\n    return this.http.put<DraughtsModel>(DraughtsService.API_END_POINT + '/draughts/' + game_name, JSON.parse(game));\r\n  }\r\n\r\n  parseJwt () {\r\n    const token = this.userService.getToken();\r\n    let base64Url = token.split('.')[1];\r\n    let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n    let jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n    }).join(''));\r\n\r\n    return JSON.parse(jsonPayload);\r\n  }\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\r\nimport {UserModel} from \"../models/User.model\";\r\nimport {Observable} from \"rxjs\";\r\nimport {environment} from '../../environments/environment';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n\r\n  static API_END_POINT = environment.API;\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getUsers(): Observable<UserModel[]> {\r\n    return this.http.get<UserModel[]>(UserService.API_END_POINT + '/users');\r\n  }\r\n\r\n  login(email: string, password: string): Observable<string> {\r\n    const user = '{' +\r\n      '\"email\": \"' + email + '\", ' +\r\n      '\"password\":\"' + password + '\"}';\r\n    return this.http.post<string>(UserService.API_END_POINT + '/users/login', JSON.parse(user));\r\n  }\r\n\r\n  getUserProfile(): Observable<UserModel> {\r\n    return this.http.get<UserModel>(UserService.API_END_POINT + '/users/profile', {\r\n      headers: this.getHeaders()\r\n    });\r\n  }\r\n\r\n  isUserActive() {\r\n    if (window.sessionStorage.getItem('token') !== null) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  registration(username: string, email: string, password: string): Observable<UserModel> {\r\n    const user = '{' +\r\n      '\"username\": \"' + username + '\", ' +\r\n      '\"email\": \"' + email + '\", ' +\r\n      '\"password\":\"' + password + '\"}';\r\n    return this.http.post<UserModel>(UserService.API_END_POINT + '/users', JSON.parse(user));\r\n  }\r\n\r\n  saveToken(token: string) {\r\n    window.sessionStorage.setItem('token', token);\r\n  }\r\n\r\n  getToken(): string {\r\n    return window.sessionStorage.getItem('token');\r\n  }\r\n\r\n  deleteUser(): Observable<UserModel> {\r\n    return this.http.delete<UserModel>(UserService.API_END_POINT + '/users/profile', {\r\n      headers: this.getHeaders()\r\n    });\r\n  }\r\n\r\n  getHeaders(): HttpHeaders {\r\n    return new HttpHeaders().set('auth-token', this.getToken());\r\n  }\r\n\r\n  updateUser(username: string): Observable<UserModel> {\r\n    const user = '{' +\r\n      '\"username\": \"' + username + '\"}';\r\n\r\n    return this.http.put<UserModel>(UserService.API_END_POINT + '/users/profile', JSON.parse(user), {\r\n      headers: this.getHeaders()\r\n    });\r\n  }\r\n\r\n  logout(){\r\n    window.sessionStorage.removeItem('token');\r\n    alert('Thanks for playing Draughts');\r\n  }\r\n}\r\n","import {Component} from '@angular/core';\r\nimport {UserService} from \"../../services/user.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-user-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent {\r\n\r\n  email = '';\r\n  password = '';\r\n  message = '';\r\n\r\n  constructor(private userService: UserService, private router: Router) {\r\n  }\r\n\r\n  login() {\r\n    this.userService.login(this.email, this.password).subscribe(\r\n      data => {\r\n        this.userService.saveToken(data['token']);\r\n        this.router.navigate(['/']);\r\n      },\r\n      error => {\r\n        this.message = error.statusText;\r\n      });\r\n  }\r\n}\r\n","<mat-card>\r\n  <mat-form-field>\r\n    <input matInput type=\"email\" placeholder=\"email\" [(ngModel)]=\"email\">\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    <input matInput type=\"password\" placeholder=\"password\" [(ngModel)]=\"password\">\r\n  </mat-form-field>\r\n  <p> {{message}} </p>\r\n  <button mat-raised-button color='primary'(click)=\"login()\">Login</button>\r\n</mat-card>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {UserService} from '../../services/user.service';\r\nimport {UserModel} from '../../models/User.model';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-user-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.css']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n\r\n  user: UserModel;\r\n  userId = '';\r\n  username = '';\r\n  email = '';\r\n  confirmDelete = false;\r\n  message = '';\r\n\r\n  constructor(private userService: UserService, private router: Router) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getUserProfile().subscribe(data => {\r\n      this.user = data;\r\n      this.username = this.user.username;\r\n      this.email = this.user.email;\r\n    });\r\n  }\r\n\r\n  updateProfile() {\r\n    this.userService.updateUser(this.username).subscribe(data => {\r\n      this.user = data;\r\n      this.message = '';\r\n    }, error => {\r\n      this.message = error.statusText;\r\n    });\r\n  }\r\n\r\n  undo() {\r\n    this.confirmDelete = false;\r\n  }\r\n\r\n  deleteUser() {\r\n    this.confirmDelete = true;\r\n  }\r\n\r\n  logout() {\r\n    this.userService.logout();\r\n    this.router.navigate(['']);\r\n  }\r\n\r\n  deleteAccount() {\r\n    this.userService.deleteUser().subscribe(data => {\r\n      alert('Account deleted');\r\n      this.router.navigate(['']);\r\n    });\r\n  }\r\n}\r\n","<h1>{{user.username}}'s Profile</h1>\r\n<mat-card>\r\n  <mat-form-field>\r\n    <mat-label>Username</mat-label>\r\n    <input matInput type=\"text\" [(ngModel)]=\"username\">\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    <mat-label>Email</mat-label>\r\n    <input matInput type=\"email\" disabled value=\"{{email}}\">\r\n  </mat-form-field>\r\n  <p *ngIf=\"message != ''\">{{message}}</p>\r\n  <button mat-raised-button color='primary' (click)=\"updateProfile()\">Update profile</button>\r\n  <button mat-raised-button color='warn' (click)=\"deleteUser()\">Delete account</button>\r\n  <div *ngIf=\"confirmDelete\">\r\n    <p>Are you sure?</p>\r\n    <button mat-raised-button color='primary' (click)=\"undo()\">No</button>\r\n    <button mat-raised-button color='warn' (click)=\"deleteAccount()\">Yes</button>\r\n  </div>\r\n  <br>\r\n  <div>\r\n    <button mat-raised-button color='accent' (click)=\"logout()\">Logout</button>\r\n  </div>\r\n</mat-card>\r\n","import { Component } from '@angular/core';\r\nimport {UserService} from \"../../services/user.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-user-registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.css']\r\n})\r\nexport class RegistrationComponent {\r\n\r\n  username = '';\r\n  email = '';\r\n  password = '';\r\n  repetedPassword = '';\r\n\r\n  constructor(private userService: UserService, private router: Router) {\r\n  }\r\n\r\n  register(){\r\n    if (this.password === this.repetedPassword)\r\n      this.userService.registration(this.username, this.email, this.password).subscribe(\r\n        data => {\r\n          this.router.navigate(['']);\r\n        }\r\n      );\r\n  }\r\n}\r\n","<mat-card>\r\n<mat-form-field>\r\n  <input matInput type=\"text\" placeholder=\"username\" [(ngModel)]=\"username\">\r\n</mat-form-field>\r\n<mat-form-field>\r\n  <input matInput type=\"email\" placeholder=\"email\" [(ngModel)]=\"email\">\r\n</mat-form-field>\r\n<mat-form-field>\r\n  <input matInput type=\"password\" placeholder=\"password\" [(ngModel)]=\"password\">\r\n</mat-form-field>\r\n<mat-form-field>\r\n  <input matInput type=\"password\" placeholder=\"repit password\" [(ngModel)]=\"repetedPassword\">\r\n</mat-form-field>\r\n<button mat-raised-button color='primary'(click)=\"register()\">Register</button>\r\n</mat-card>\r\n","import {Component} from '@angular/core';\r\nimport {UserService} from '../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-welcome',\r\n  templateUrl: './welcome.component.html'\r\n})\r\nexport class WelcomeComponent {\r\n\r\n  constructor(public userService:UserService) {\r\n  }\r\n}\r\n","<h1>Welcome to draughts</h1>\r\n<div *ngIf=\"!userService.isUserActive()\" >\r\n<button mat-raised-button routerLink=\"/signup\"><span class=\"signup\">Sign up</span></button>\r\n<button mat-raised-button routerLink=\"/login\"><span class=\"login\">Log in</span></button>\r\n</div>\r\n<div *ngIf=\"userService.isUserActive()\" >\r\n  <button mat-raised-button routerLink=\"/playGame\"><span class=\"openGame\">Play!</span></button>\r\n  <button mat-raised-button routerLink=\"/\" (click)=\"userService.logout()\"><span class=\"logout\">Log out!</span></button>\r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  API: 'http://localhost:4600'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}
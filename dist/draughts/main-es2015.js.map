{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/game/controllers/dialog/DialogGameBoard.component.ts","./src/app/game/views/dialog/dialog-game-board.component.html","./src/app/game/controllers/dialog/DialogGameName.component.ts","./src/app/game/views/dialog/dialog-game-name.html","./src/app/game/controllers/mySquare.component.ts","./src/app/game/views/mySquare.component.html","./src/app/game/controllers/pieces/draught.component.ts","./src/app/game/views/pieces/draught.component.html","./src/app/game/controllers/pieces/pawn.component.ts","./src/app/game/views/pieces/pawn.component.html","./src/app/game/game.service.ts","./src/app/game/models/Board.ts","./src/app/game/models/Color.ts","./src/app/game/models/Coordinate.ts","./src/app/game/models/DirectionClass.ts","./src/app/game/models/Draught.ts","./src/app/game/models/Error.ts","./src/app/game/models/Game.ts","./src/app/game/models/Pawn.ts","./src/app/game/models/Piece.ts","./src/app/game/models/Turn.ts","./src/app/game/models/mySquare.ts","./src/app/playGame/openGame.component.ts","./src/app/playGame/openGame.component.html","./src/app/services/draughts.service.ts","./src/app/services/user.service.ts","./src/app/users/login/login.component.ts","./src/app/users/login/login.component.html","./src/app/users/profile/profile.component.ts","./src/app/users/profile/profile.component.html","./src/app/users/register/registration.component.ts","./src/app/users/register/registration.component.html","./src/app/welcome/welcome.component.ts","./src/app/welcome/welcome.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\nimport {RegistrationComponent} from './users/register/registration.component';\r\nimport {LoginComponent} from './users/login/login.component';\r\nimport {ProfileComponent} from './users/profile/profile.component';\r\nimport {WelcomeComponent} from './welcome/welcome.component';\r\nimport {DialogGameBoard} from './game/controllers/dialog/DialogGameBoard.component';\r\nimport {OpenGame} from './playGame/openGame.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {path: 'signup', component: RegistrationComponent},\r\n  {path: 'login', component: LoginComponent},\r\n  {path: 'play', component: DialogGameBoard},\r\n  {path: 'playGame', component: OpenGame},\r\n  {path: 'profile', component: ProfileComponent},\r\n  {path: 'welcome', component: WelcomeComponent},\r\n  {path: '', redirectTo: 'welcome', pathMatch: 'full'},\r\n  { path: '**', component: WelcomeComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {\r\n}\r\n","import { Component } from '@angular/core';\r\nimport {UserService} from './services/user.service';\r\nimport {environment} from '../environments/environment';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'draughts';\r\n  apiEndPoint: string;\r\n\r\n  constructor(public userService: UserService) {\r\n    this.apiEndPoint = environment.API;\r\n  }\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n  <a class=\"draughs\" routerLink=\"\"><span>Draughts</span></a>\r\n  <button class=\"menuLogin\" *ngIf=\"userService.isUserActive()\" mat-menu-item routerLink=\"profile\">\r\n    <span><mat-icon>account_circle</mat-icon> My Profile</span>\r\n  </button>\r\n  <button class=\"menuLogin\" *ngIf=\"userService.isUserActive()\" mat-menu-item routerLink=\"playGame\"><span>Play Game!</span></button>\r\n  <button class=\"menuButton\" mat-flat-button [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_vert</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n\r\n<mat-menu #menu=\"matMenu\">\r\n  <button mat-menu-item><span>Game</span></button>\r\n  <button mat-menu-item *ngIf=\"!userService.isUserActive()\" routerLink=\"signup\"><span>Sign up</span></button>\r\n  <button mat-menu-item *ngIf=\"userService.isUserActive()\" (click)=\"userService.logout()\" routerLink=\"/\"><span>Log out</span></button>\r\n</mat-menu>\r\n<main>\r\n  <router-outlet></router-outlet>\r\n</main>\r\n","import {BrowserModule} from '@angular/platform-browser';\r\nimport {NgModule} from '@angular/core';\r\n\r\nimport {AppRoutingModule} from './app-routing.module';\r\nimport {AppComponent} from './app.component';\r\nimport {RegistrationComponent} from './users/register/registration.component';\r\nimport {FormsModule} from '@angular/forms';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {UserService} from './services/user.service';\r\nimport {HttpClientModule} from '@angular/common/http';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {LoginComponent} from './users/login/login.component';\r\nimport {ProfileComponent} from './users/profile/profile.component';\r\nimport {WelcomeComponent} from './welcome/welcome.component';\r\nimport {DialogGameBoard} from './game/controllers/dialog/DialogGameBoard.component';\r\nimport {MySquareComponent} from './game/controllers/mySquare.component';\r\nimport {DraughtComponent} from './game/controllers/pieces/draught.component';\r\nimport {PawnComponent} from './game/controllers/pieces/pawn.component';\r\nimport {GameService} from './game/game.service';\r\nimport {DraughtsService} from './services/draughts.service';\r\nimport {DialogGameName} from './game/controllers/dialog/DialogGameName.component';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {OpenGame} from './playGame/openGame.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    RegistrationComponent,\r\n    LoginComponent,\r\n    ProfileComponent,\r\n    WelcomeComponent,\r\n    DialogGameBoard,\r\n    MySquareComponent,\r\n    DraughtComponent,\r\n    PawnComponent,\r\n    DialogGameName,\r\n    OpenGame\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatToolbarModule,\r\n    HttpClientModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatDialogModule\r\n  ],\r\n  entryComponents: [\r\n    DialogGameName,\r\n    DialogGameBoard\r\n  ],\r\n  providers: [\r\n    UserService,\r\n    GameService,\r\n    DraughtsService\r\n  ],\r\n  bootstrap: [\r\n    AppComponent\r\n  ]\r\n})\r\nexport class AppModule {\r\n}\r\n","import {Component, Inject, OnInit} from '@angular/core';\r\nimport {MySquare} from '../../models/mySquare';\r\nimport {Color} from '../../models/Color';\r\nimport {GameService} from '../../game.service';\r\nimport {DraughtsService} from '../../../services/draughts.service';\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from '@angular/material/dialog';\r\nimport {DialogGameName} from './DialogGameName.component';\r\nimport {Pawn} from '../../models/Pawn';\r\nimport {Draught} from '../../models/Draught';\r\nimport {UserService} from '../../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-draughts',\r\n  templateUrl: '../../views/dialog/dialog-game-board.component.html',\r\n  styleUrls: ['../../views/dialog/dialog-game-board.component.css']\r\n})\r\nexport class DialogGameBoard implements OnInit {\r\n\r\n  boardDimension: MySquare[][];\r\n  gameName: string;\r\n\r\n  constructor(private gameService: GameService, private draughtsService: DraughtsService, private userService: UserService,\r\n              private dialog: MatDialog, public dialogRef: MatDialogRef<DialogGameName>,\r\n              @Inject(MAT_DIALOG_DATA) public data: any) {\r\n    this.gameName = null;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.data.gameName !== null) {\r\n      this.setBoard(this.data.board);\r\n      this.gameName = this.data.gameName;\r\n    } else {\r\n      this.gameService.resetGame();\r\n    }\r\n    this.boardDimension = this.gameService.getBoardView();\r\n  }\r\n\r\n  setBoard(board: string){\r\n    let position: number = 0;\r\n    for (let row = 0; row < this.gameService.getDimension(); row++) {\r\n      for (let column = 0; column < this.gameService.getDimension(); column++) {\r\n        if (board.charAt(position) === '_') {\r\n          this.gameService.setPiece(null, row, column);\r\n        } else if (board.charAt(position) === 'r') {\r\n          this.gameService.setPiece(new Pawn(Color.RED), row, column);\r\n        } else if (board.charAt(position) === 'R') {\r\n          this.gameService.setPiece(new Draught(Color.RED), row, column);\r\n        } else if (board.charAt(position) === 'n') {\r\n          this.gameService.setPiece(new Pawn(Color.BLACK), row, column);\r\n        } else if (board.charAt(position) === 'N') {\r\n          this.gameService.setPiece(new Draught(Color.BLACK), row, column);\r\n        }\r\n        position++;\r\n      }\r\n    }\r\n  }\r\n\r\n  getTurnColor(): Color {\r\n    return this.gameService.getTurnColor();\r\n  }\r\n\r\n  saveGame() {\r\n    if (this.gameName === null) {\r\n      this.openDialog();\r\n    } else {\r\n      this.draughtsService.put(this.gameName, this.gameService.toStringBoard(), this.gameService.getTurnColor()).subscribe(\r\n        data => {\r\n          alert('Game update');\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(DialogGameName, {\r\n      height: '250px',\r\n      width: '250px',\r\n      data: {gameName: this.gameName}\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      console.log('The dialog was closed');\r\n      this.gameName = result;\r\n      this.draughtsService.post(this.gameName, this.gameService.toStringBoard(), this.gameService.getTurnColor()).subscribe(\r\n        data => {\r\n          alert('Game saved');\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  logout(){\r\n    this.dialog.closeAll();\r\n    this.userService.logout();\r\n  }\r\n}\r\n","<div>\r\n  <p> Mueve:\r\n    <img *ngIf=\"this.getTurnColor() === 0\" src=\"./assets/images/red.png\"\r\n         class=\"turn\" alt=\"Red pieces turn\">\r\n    <img *ngIf=\"this.getTurnColor() === 1\" src=\"./assets/images/black.png\"\r\n         class=\"turn\" alt=\"Black pieces turn\">\r\n  </p>\r\n</div>\r\n<div>\r\n  <p>\r\n    <button (click)=\"logout()\" routerLink=\"/\">Logout!</button>\r\n  </p>\r\n</div>\r\n<div>\r\n  <p *ngIf=\"gameName !== null\"> {{gameName}}</p>\r\n  <p>\r\n    <button (click)=\"saveGame()\">Save Game</button>\r\n  </p>\r\n</div>\r\n<div class=\"board\">\r\n  <div *ngFor=\"let row of boardDimension\" class=\"fila\">\r\n    <app-board-square *ngFor=\"let column of row\" [square]=\"column\"></app-board-square>\r\n  </div>\r\n</div>\r\n","import {Component, Inject} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'dialog-game-name',\r\n  templateUrl: '../../views/dialog/dialog-game-name.html',\r\n})\r\nexport class DialogGameName {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DialogGameName>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<h1 mat-dialog-title>Game name</h1>\r\n<div mat-dialog-content>\r\n  <p>Name your game!</p>\r\n  <mat-form-field>\r\n    <mat-label>Game name</mat-label>\r\n    <input matInput [(ngModel)]=\"data.gameName\">\r\n  </mat-form-field>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button mat-button (click)=\"onNoClick()\">Cancel</button>\r\n  <button mat-button [mat-dialog-close]=\"data.gameName\" cdkFocusInitial>Ok</button>\r\n</div>\r\n","import {Component, Input} from '@angular/core';\r\nimport {MySquare} from '../models/mySquare';\r\nimport {GameService} from '../game.service';\r\nimport {Error} from '../models/Error';\r\n\r\n@Component({\r\n  selector: 'app-board-square',\r\n  templateUrl: '../views/mySquare.component.html',\r\n  styleUrls: ['../views/mySquare.component.css']\r\n})\r\nexport class MySquareComponent {\r\n\r\n  @Input() public square: MySquare;\r\n\r\n  constructor(private gameService: GameService) {\r\n  }\r\n\r\n  userMoves(): Error {\r\n    return this.gameService.userClicks(this.square.getPiece(), this.square.getRow(), this.square.getColumn());\r\n  }\r\n}\r\n","<div [class.playable]=\"square.getRow()%2 !== square.getColumn()%2\"\r\n     [class.notplayable]=\"square.getRow()%2 === square.getColumn()%2\"\r\n     [class.highlight]=\"square.isSelected()\">\r\n  <div (click)=\"userMoves()\" *ngIf=\"square.getRow()%2 !== square.getColumn()%2\">\r\n    <pawn\r\n      *ngIf=\"square.getPieceType() === 'n' || square.getPieceType() === 'r'\"\r\n      [pawn]=\"square.getPiece()\"></pawn>\r\n    <draught\r\n      *ngIf=\"square.getPieceType() === 'N' || square.getPieceType() === 'R'\"\r\n      [draught]=\"square.getPiece()\"></draught>\r\n    <img *ngIf=\"square.getPieceType() === ''\"\r\n         src=\"../../../assets/images/noPiece.png\"\r\n         class=\"noPawn\" alt=\"Empty square\">\r\n  </div>\r\n</div>\r\n","import {Component, Input} from '@angular/core';\r\nimport {Draught} from '../../models/Draught';\r\nimport {Color} from '../../models/Color';\r\n\r\n@Component({\r\n  selector: 'draught',\r\n  templateUrl: '../../views/pieces/draught.component.html',\r\n  styleUrls: ['../../views/pieces/piece.component.css']\r\n})\r\nexport class DraughtComponent {\r\n  @Input() draught: Draught;\r\n  BLACK = Color.BLACK;\r\n  RED = Color.RED;\r\n}\r\n","<div *ngIf=\"draught !== null\" class=\"divPiece\">\r\n  <img *ngIf=\"draught.getColor() === RED\" src=\"./assets/images/red_draught.png\"\r\n       class=\"piece\" alt=\"Red Draught\">\r\n  <img *ngIf=\"draught.getColor() === BLACK\" src=\"./assets/images/black_draught.png\"\r\n       class=\"piece\" alt=\"Black Draught\">\r\n</div>\r\n","import {Component, Input} from '@angular/core';\r\nimport {Pawn} from '../../models/Pawn';\r\nimport {Color} from '../../models/Color';\r\n\r\n@Component({\r\n  selector: 'pawn',\r\n  templateUrl: '../../views/pieces/pawn.component.html',\r\n  styleUrls: ['../../views/pieces/piece.component.css']\r\n})\r\nexport class PawnComponent {\r\n  @Input() pawn: Pawn;\r\n  BLACK = Color.BLACK;\r\n  RED = Color.RED;\r\n}\r\n","<div *ngIf=\"pawn !== null\" class=\"divPiece\">\r\n  <img *ngIf=\"pawn.getColor() === RED\" src=\"./assets/images/red.png\"\r\n       class=\"piece\" alt=\"Red Pawn\">\r\n  <img *ngIf=\"pawn.getColor() === BLACK\" src=\"./assets/images/black.png\"\r\n       class=\"piece\" alt=\"Black Pawn\">\r\n</div>\r\n","import {Injectable} from '@angular/core';\r\nimport {Piece} from './models/Piece';\r\nimport {Coordinate} from './models/Coordinate';\r\nimport {Game} from './models/Game';\r\nimport {Error, getErrorValues} from './models/Error';\r\nimport {MySquare} from './models/mySquare';\r\nimport {Pawn} from './models/Pawn';\r\nimport {Color, colorValues} from './models/Color';\r\nimport {Draught} from './models/Draught';\r\nimport {DirectionClass} from './models/DirectionClass';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GameService {\r\n\r\n  private piece: Piece;\r\n  private coordinate: Coordinate;\r\n  private game: Game;\r\n  private boardView: MySquare[][];\r\n  private pieceIsSelected: boolean;\r\n  private multiJump: boolean;\r\n\r\n  constructor() {\r\n    this.game = new Game();\r\n    this.piece = null;\r\n    this.coordinate = null;\r\n    this.pieceIsSelected = false;\r\n    this.resetGame();\r\n    this.multiJump = false;\r\n  }\r\n\r\n  public getBoardView(): MySquare[][] {\r\n    return this.boardView;\r\n  }\r\n\r\n  public resetGame() {\r\n    this.initBoard();\r\n    this.initTurn();\r\n  }\r\n\r\n  private initTurn() {\r\n    this.game.resetTurn();\r\n  }\r\n\r\n  private initBoard() {\r\n    this.boardView = [];\r\n    for (let i = 0; i < Coordinate.getDimension(); i++) {\r\n      this.boardView[i] = [];\r\n      for (let j = 0; j < Coordinate.getDimension(); j++) {\r\n        if (i % 2 !== j % 2) {\r\n          this.initialize(i, j);\r\n        } else {\r\n          this.boardView[i][j] = new MySquare(null, i, j);\r\n          this.setPiece(null, i, j);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initialize(row: number, column: number) {\r\n    if (row < 3) {\r\n      this.boardView[row][column] = new MySquare(new Pawn(Color.BLACK), row, column);\r\n      this.setPiece(new Pawn(Color.BLACK), row, column);\r\n    } else if (row > 4) {\r\n      this.boardView[row][column] = new MySquare(new Pawn(Color.RED), row, column);\r\n      this.setPiece(new Pawn(Color.RED), row, column);\r\n    } else {\r\n      this.boardView[row][column] = new MySquare(null, row, column);\r\n      this.setPiece(null, row, column);\r\n    }\r\n  }\r\n\r\n  private clearHighlightedPiece() {\r\n    if (this.coordinate !== null && !this.multiJump) {\r\n      this.boardView[this.coordinate.getRow()][this.coordinate.getColumn()].setSelected(false);\r\n    }\r\n  }\r\n\r\n  public userClicks(piece: Piece, row: number, column: number): Error {\r\n    this.clearHighlightedPiece();\r\n    if (piece !== null && !this.multiJump) {\r\n      this.boardView[row][column].setSelected(true);\r\n      this.piece = piece;\r\n      this.coordinate = new Coordinate(row, column);\r\n      this.pieceIsSelected = true;\r\n    } else if (piece === null && this.pieceIsSelected) {\r\n      return this.movePiece(new Coordinate(row, column));\r\n    } else if (this.multiJump) {\r\n      this.boardView[this.coordinate.getRow()][this.coordinate.getColumn()].setSelected(true);\r\n    } else {\r\n      this.pieceIsSelected = false;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private getSquarePiece(): MySquare {\r\n    let mySquare: MySquare = null;\r\n    this.boardView.forEach(row => row.forEach(square => {\r\n      if (square.getPiece() === this.piece) {\r\n        mySquare = square;\r\n      }\r\n    }));\r\n    return mySquare;\r\n  }\r\n\r\n  private putPiece(coordinate: Coordinate) {\r\n    this.boardView[coordinate.getRow()][coordinate.getColumn()].put(this.piece);\r\n  }\r\n\r\n  private movePiece(target: Coordinate): Error {\r\n    let error: Error = this.game.move([this.coordinate, target]);\r\n    if (error === null) {\r\n      this.getSquarePiece().clearPiece();\r\n      this.putPiece(target);\r\n      let direction: DirectionClass = this.coordinate.getDirection(target);\r\n      if (this.coordinate.getDiagonalCoordinate(direction, 2).equals(target)) {\r\n        this.clearJumpedPiece(this.coordinate.getDiagonalCoordinate(direction, 1));\r\n      }\r\n      this.multiJump = this.game.isMultiJumpPossible(target) && this.coordinate.getDiagonalDistance(target) === 2;\r\n      if (this.multiJump) {\r\n        this.prepareForMultiJump(target);\r\n        return;\r\n      } else {\r\n        this.transformPawnToDraught(target);\r\n        this.prepareForNextMovement();\r\n      }\r\n    } else {\r\n      alert(getErrorValues()[error]);\r\n    }\r\n    this.checkGameIsFinished();\r\n    return error;\r\n  }\r\n\r\n  private prepareForNextMovement(){\r\n    this.pieceIsSelected = false;\r\n    this.boardView[this.coordinate.getRow()][this.coordinate.getColumn()].setSelected(false);\r\n  }\r\n\r\n  private checkGameIsFinished(){\r\n    if (this.game.isBlocked()) {\r\n      alert('Fin del juego, el ganador es: ' + colorValues()[this.game.getOppositeTurnColor()]);\r\n    }\r\n  }\r\n\r\n  private prepareForMultiJump(target: Coordinate){\r\n    this.boardView[this.coordinate.getRow()][this.coordinate.getColumn()].setSelected(false);\r\n    this.boardView[target.getRow()][target.getColumn()].setSelected(true);\r\n    this.game.changeTurnToAllowMultiJump();\r\n    this.coordinate = target;\r\n  }\r\n\r\n  private transformPawnToDraught(coordinate: Coordinate) {\r\n    if (this.game.getPiece(coordinate).getCode() === 'N' && coordinate.isLast()) {\r\n      this.boardView[coordinate.getRow()][coordinate.getColumn()].put(new Draught(Color.BLACK));\r\n    } else if (this.game.getPiece(coordinate).getCode() === 'R' && coordinate.isFirst()) {\r\n      this.boardView[coordinate.getRow()][coordinate.getColumn()].put(new Draught(Color.RED));\r\n    }\r\n  }\r\n\r\n  private clearJumpedPiece(coordinate: Coordinate) {\r\n    this.boardView[coordinate.getRow()][coordinate.getColumn()].put(null);\r\n  }\r\n\r\n  public getPiece(): Piece {\r\n    return this.piece;\r\n  }\r\n\r\n  public getTurnColor(): Color {\r\n    return this.game.getTurnColor();\r\n  }\r\n\r\n  public isPieceSelected(): boolean {\r\n    return this.pieceIsSelected;\r\n  }\r\n\r\n  public isMultiJump(): boolean {\r\n    return this.multiJump;\r\n  }\r\n\r\n  public setPiece(piece: Piece, row: number, column: number) {\r\n    this.boardView[row][column].setPiece(piece);\r\n    this.game.changePiece(piece, row, column);\r\n  }\r\n\r\n  public getNumberOfPieces(color: Color): number {\r\n    return this.game.getNumberOfPieces(color);\r\n  }\r\n\r\n  public getDimension(): number {\r\n    return Coordinate.getDimension();\r\n  }\r\n\r\n  public toStringBoard(): string {\r\n    let string: string = '';\r\n    for (let i = 0; i < Coordinate.getDimension(); i++) {\r\n      for (let j = 0; j < Coordinate.getDimension(); j++) {\r\n        if (this.boardView[i][j].getPiece() === null) {\r\n          string += '_';\r\n        } else {\r\n          string += this.boardView[i][j].getPiece().getCode();\r\n        }\r\n      }\r\n    }\r\n    return string;\r\n  }\r\n}\r\n","import {Piece} from './Piece';\r\nimport {Coordinate} from './Coordinate';\r\nimport {Color} from './Color';\r\nimport {DirectionClass} from './DirectionClass';\r\n\r\nexport class Board {\r\n\r\n  private pieces: Piece[][];\r\n\r\n  private static readonly MAXIMUM_LIMIT_TO_JUMP = Coordinate.getDimension() - 2;\r\n\r\n  private static readonly MINIMUM_LIMIT_TO_JUMP = 1;\r\n\r\n  constructor() {\r\n    this.pieces = [];\r\n    for (let i = 0; i < Coordinate.getDimension(); i++) {\r\n      this.pieces[i] = [];\r\n      for (let j = 0; j < Coordinate.getDimension(); j++) {\r\n        this.pieces[i][j] = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  getPiece(coordinate: Coordinate): Piece {\r\n    if (coordinate === null) {\r\n      return null;\r\n    }\r\n    return this.pieces[coordinate.getRow()][coordinate.getColumn()];\r\n  }\r\n\r\n  setPiece(piece: Piece, row: number, column: number) {\r\n    this.pieces[row][column] = piece;\r\n  }\r\n\r\n  put(coordinate: Coordinate, piece: Piece) {\r\n    if (coordinate !== null) {\r\n      this.pieces[coordinate.getRow()][coordinate.getColumn()] = piece;\r\n    }\r\n  }\r\n\r\n  remove(coordinate: Coordinate): Piece {\r\n    if (this.getPiece(coordinate) === null) {\r\n      return null;\r\n    }\r\n    let piece: Piece = this.getPiece(coordinate);\r\n    this.put(coordinate, null);\r\n    return piece;\r\n  }\r\n\r\n  move(origin: Coordinate, target: Coordinate) {\r\n    if (this.getPiece(origin) !== null) {\r\n      this.put(target, this.remove(origin));\r\n    }\r\n  }\r\n\r\n  getBetweenDiagonalPieces(origin: Coordinate, target: Coordinate): Array<Piece> {\r\n    let betweenDiagonalPieces: Array<Piece> = new Array<Piece>();\r\n    if (origin.isOnDiagonal(target)) {\r\n      for (let coordinate of origin.getBetweenDiagonalCoordinates(target)) {\r\n        let piece: Piece = this.getPiece(coordinate);\r\n        if (piece != null) {\r\n          betweenDiagonalPieces.push(piece);\r\n        }\r\n      }\r\n    }\r\n    return betweenDiagonalPieces;\r\n  }\r\n\r\n  getColor(coordinate: Coordinate): Color {\r\n    const piece: Piece = this.getPiece(coordinate);\r\n    if (piece === null) {\r\n      return null;\r\n    }\r\n    return piece.getColor();\r\n  }\r\n\r\n  isEmpty(coordinate: Coordinate): boolean {\r\n    return this.getPiece(coordinate) === null;\r\n  }\r\n\r\n  getAvailablePiecesToJump(coordinate: Coordinate): Array<Coordinate> {\r\n    let availablePiecesToJump: Array<Coordinate> = new Array<Coordinate>();\r\n    let color = this.getPiece(coordinate).getColor();\r\n    this.checkDiagonals(availablePiecesToJump, color, coordinate);\r\n    return availablePiecesToJump;\r\n  }\r\n\r\n  checkDiagonals(availablePiecesToJump: Array<Coordinate>, color: Color, coordinate: Coordinate) {\r\n    if (color === Color.RED && coordinate.getRow() > Board.MINIMUM_LIMIT_TO_JUMP) {\r\n      if (coordinate.getColumn() < Board.MAXIMUM_LIMIT_TO_JUMP && this.jumpIsPossible(coordinate, DirectionClass.SE)) {\r\n        availablePiecesToJump.push(coordinate);\r\n      }\r\n      if (coordinate.getColumn() > Board.MINIMUM_LIMIT_TO_JUMP && this.jumpIsPossible(coordinate, DirectionClass.SW)) {\r\n        availablePiecesToJump.push(coordinate);\r\n      }\r\n    }\r\n    if (color === Color.BLACK && coordinate.getRow() < Board.MAXIMUM_LIMIT_TO_JUMP) {\r\n      if (coordinate.getColumn() > Board.MINIMUM_LIMIT_TO_JUMP && this.jumpIsPossible(coordinate, DirectionClass.NW)) {\r\n        availablePiecesToJump.push(coordinate);\r\n      }\r\n      if (coordinate.getColumn() < Board.MAXIMUM_LIMIT_TO_JUMP && this.jumpIsPossible(coordinate, DirectionClass.NE)) {\r\n        availablePiecesToJump.push(coordinate);\r\n      }\r\n    }\r\n  }\r\n\r\n  jumpIsPossible(coordinate: Coordinate, direction: DirectionClass): boolean {\r\n    return this.getPiece(coordinate.getDiagonalCoordinate(direction, 1)) !== null\r\n      && this.getColor(coordinate.getDiagonalCoordinate(direction, 1)) !== this.getColor(coordinate)\r\n      && this.getPiece(coordinate.getDiagonalCoordinate(direction, 2)) === null;\r\n  }\r\n\r\n  getNumberOfPieces(color: Color): number {\r\n    let result: number = 0;\r\n    for (let i: number = 0; i < Coordinate.getDimension(); i++) {\r\n      for (let j: number = 0; j < Coordinate.getDimension(); j++) {\r\n        if (this.pieces[i][j] != null) {\r\n          if (this.pieces[i][j].getColor() === color) {\r\n            result++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  impresion() {\r\n    let string: string = '';\r\n    for (let i = 0; i < Coordinate.getDimension(); i++) {\r\n      for (let j = 0; j < Coordinate.getDimension(); j++) {\r\n        if (this.pieces[i][j] === null) {\r\n          string += '_';\r\n        } else {\r\n          string += this.pieces[i][j].getCode();\r\n        }\r\n      }\r\n    }\r\n    return string;\r\n\r\n  }\r\n\r\n}\r\n","import {Coordinate} from './Coordinate';\r\n\r\nexport enum Color {\r\n  RED,\r\n  BLACK\r\n}\r\n\r\nconst LIMITS: number[] = [5, 2];\r\nconst StringIsNumber = value => isNaN(Number(value)) === false;\r\n\r\nfunction getColor(row: number): Color {\r\n  if (row >= LIMITS[Color.RED.valueOf()]) {\r\n    return Color.RED;\r\n  } else if (row <= LIMITS[Color.BLACK.valueOf()]) {\r\n    return Color.BLACK;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function colorGetInitialColor(coordinate: Coordinate): Color {\r\n  if (coordinate.isBlack()) {\r\n    return getColor(coordinate.getRow());\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function getColorValue(color: number): Color {\r\n  if (color === 0) {\r\n    return Color.RED;\r\n  }\r\n  if (color === 1) {\r\n    return Color.BLACK;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function colorValues() {\r\n  return Object.keys(Color)\r\n    .filter(StringIsNumber)\r\n    .map(key => Color[key]);\r\n}\r\n","import {DirectionClass} from './DirectionClass';\r\n\r\nexport class Coordinate {\r\n  private row: number;\r\n  private column: number;\r\n  private static readonly LOWER_LIMIT: number = 0;\r\n  private static readonly UPPER_LIMIT: number = 7;\r\n  private static readonly DIMENSION: number = Coordinate.UPPER_LIMIT + 1;\r\n\r\n  constructor(row: number, column: number) {\r\n    this.row = row;\r\n    this.column = column;\r\n  }\r\n\r\n  private isWithIn(): boolean {\r\n    return Coordinate.LOWER_LIMIT <= this.row && this.row <= Coordinate.UPPER_LIMIT\r\n      && Coordinate.LOWER_LIMIT <= this.column && this.column <= Coordinate.UPPER_LIMIT;\r\n  }\r\n\r\n  private subtract(coordinate: Coordinate): Coordinate {\r\n    return new Coordinate(this.row - coordinate.row, this.column - coordinate.column);\r\n  }\r\n\r\n  private plus(coordinate: Coordinate): Coordinate {\r\n    return new Coordinate(this.row + coordinate.row, this.column + coordinate.column);\r\n  }\r\n\r\n  public getDirection(coordinate: Coordinate): DirectionClass {\r\n    if (coordinate === null) {\r\n      return null;\r\n    }\r\n    let substract: Coordinate = coordinate.subtract(this);\r\n    for (let direction of DirectionClass.values()) {\r\n      if (direction.isOnDirection(substract)) {\r\n        return direction;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public isOnDiagonal(coordinate: Coordinate): boolean {\r\n    return this.getDirection(coordinate) != null;\r\n  }\r\n\r\n  public getDiagonalDistance(coordinate: Coordinate): number {\r\n    if (!this.isOnDiagonal(coordinate)) {\r\n      return null;\r\n    }\r\n    return Math.abs(this.subtract(coordinate).getRow());\r\n  }\r\n\r\n  private getDistanceCoordinate(direction: DirectionClass, distance: number): Coordinate {\r\n    return new Coordinate(direction.getDistanceCoordinateRow(distance), direction.getDistanceCoordinateColumn(distance));\r\n  }\r\n\r\n  public getBetweenDiagonalCoordinates(coordinate: Coordinate): Array<Coordinate> {\r\n    if (!this.isOnDiagonal(coordinate)) {\r\n      return null;\r\n    }\r\n    let coordinates: Array<Coordinate> = new Array<Coordinate>();\r\n    let direction: DirectionClass = this.getDirection(coordinate);\r\n    let cursor: Coordinate = this.plus(this.getDistanceCoordinate(direction, 1));\r\n    while (!cursor.equals(coordinate)) {\r\n      coordinates.push(cursor);\r\n      cursor = cursor.plus(this.getDistanceCoordinate(direction, 1));\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  public equals(coordinate: Coordinate) {\r\n    return this.getRow() === coordinate.getRow() && this.getColumn() === coordinate.getColumn();\r\n  }\r\n\r\n  public getDiagonalCoordinates(level: number): Array<Coordinate> {\r\n    let diagonalCoordinates: Array<Coordinate> = new Array<Coordinate>();\r\n    for (let direction of DirectionClass.values()) {\r\n      let diagonalCoordinate: Coordinate = this.plus(this.getDistanceCoordinate(direction, level));\r\n      if (diagonalCoordinate !== null && diagonalCoordinate.isWithIn()) {\r\n        diagonalCoordinates.push(diagonalCoordinate);\r\n      }\r\n    }\r\n    return diagonalCoordinates;\r\n  }\r\n\r\n  public getDiagonalCoordinate(direction: DirectionClass, level: number): Coordinate {\r\n    return this.plus(this.getDistanceCoordinate(direction, level));\r\n  }\r\n\r\n  public isBlack(): boolean {\r\n    return (this.row + this.column) % 2 != 0;\r\n  }\r\n\r\n  public isLast(): boolean {\r\n    return this.row == Coordinate.UPPER_LIMIT;\r\n  }\r\n\r\n  public isFirst(): boolean {\r\n    return this.row == Coordinate.LOWER_LIMIT;\r\n  }\r\n\r\n  public getRow(): number {\r\n    return this.row;\r\n  }\r\n\r\n  public getColumn(): number {\r\n    return this.column;\r\n  }\r\n\r\n  public static getDimension(): number {\r\n    return Coordinate.DIMENSION;\r\n  }\r\n\r\n}\r\n","import {Coordinate} from \"./Coordinate\";\r\n\r\nexport class DirectionClass {\r\n  public static readonly NE = new DirectionClass(1,1);\r\n  public static readonly SE = new DirectionClass(-1,1);\r\n  public static readonly SW = new DirectionClass(-1,-1);\r\n  public static readonly NW = new DirectionClass(1,-1);\r\n\r\n  private readonly horizontalShift: number;\r\n  private readonly verticalShift: number;\r\n\r\n  private constructor(horizontalShift: number, verticalShift: number) {\r\n    this.horizontalShift = horizontalShift;\r\n    this.verticalShift = verticalShift;\r\n  }\r\n\r\n  isOnDirection(coordinate: Coordinate): boolean{\r\n    if (Math.abs(coordinate.getRow()) != Math.abs(coordinate.getColumn()))\r\n      return false;\r\n    if (coordinate.getRow()==0)\r\n      return false;\r\n    if (this.horizontalShift * coordinate.getRow() < 0)\r\n      return false;\r\n    if (this.verticalShift * coordinate.getColumn() < 0)\r\n      return false;\r\n    return true;\r\n  }\r\n\r\n  getDistanceCoordinateRow(distance: number): number{\r\n    return this.horizontalShift * distance;\r\n  }\r\n\r\n  getDistanceCoordinateColumn(distance: number): number{\r\n    return this.verticalShift * distance;\r\n  }\r\n\r\n  static values(): Array<DirectionClass>{\r\n    return [DirectionClass.NE, DirectionClass.SE, DirectionClass.SW, DirectionClass.NW];\r\n  }\r\n}\r\n\r\nenum EnumDirection {\r\n  NE,\r\n  SE,\r\n  SW,\r\n  NW\r\n}\r\n\r\nexport const Direction = new Map<DirectionClass, EnumDirection>([\r\n  [DirectionClass.NE, EnumDirection.NE],\r\n  [DirectionClass.SE, EnumDirection.SE],\r\n  [DirectionClass.SW, EnumDirection.SW],\r\n  [DirectionClass.NW, EnumDirection.NW]\r\n]);\r\n","import {Piece} from './Piece';\r\nimport {Coordinate} from './Coordinate';\r\nimport {Error} from './Error';\r\n\r\nexport class Draught extends Piece {\r\n\r\n  private static readonly CODES: string[] = ['R', 'N'];\r\n  private static readonly MAX_DISTANCE_JUMP: number = 2;\r\n\r\n  isCorrectDiagonalMovement(pieceAmountBetweenCoordinates: number, pair: number, coordinates: Coordinate[]): Error {\r\n    let distance: number = Number(coordinates[pair].getDiagonalDistance(coordinates[pair + 1]));\r\n    if (distance > Draught.MAX_DISTANCE_JUMP && pieceAmountBetweenCoordinates === 1) {\r\n      return Error.TOO_MUCH_DISTANCE_TO_JUMP;\r\n    }\r\n    if (pieceAmountBetweenCoordinates > 1) {\r\n      return Error.TOO_MUCH_EATINGS;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getCode(): string {\r\n    return Draught.CODES[this.color.valueOf()];\r\n  }\r\n\r\n\r\n}\r\n","export enum Error {\r\n  BAD_FORMAT,\r\n  EMPTY_ORIGIN,\r\n  OPPOSITE_PIECE,\r\n  NOT_DIAGONAL,\r\n  NOT_EMPTY_TARGET,\r\n  NOT_ADVANCED,\r\n  WITHOUT_EATING,\r\n  COLLEAGUE_EATING,\r\n  TOO_MUCH_ADVANCED,\r\n  TOO_MUCH_EATINGS,\r\n  TOO_MUCH_JUMPS,\r\n  TOO_MUCH_DISTANCE_TO_JUMP\r\n}\r\n\r\nconst StringIsNumber = value => isNaN(Number(value)) === false;\r\n\r\nexport function getErrorValues() {\r\n  return Object.keys(Error)\r\n    .filter(StringIsNumber)\r\n    .map(key => Error[key]);\r\n}\r\n","import {Board} from './Board';\r\nimport {Turn} from './Turn';\r\nimport {Coordinate} from './Coordinate';\r\nimport {Color, colorGetInitialColor} from './Color';\r\nimport {Piece} from './Piece';\r\nimport {Pawn} from './Pawn';\r\nimport {Error} from './Error';\r\nimport {Draught} from './Draught';\r\n\r\nexport class Game {\r\n\r\n  private board: Board;\r\n  private turn: Turn;\r\n\r\n  constructor() {\r\n    this.board = new Board();\r\n    this.turn = new Turn();\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    for (let i = 0; i < Coordinate.getDimension(); i++) {\r\n      for (let j = 0; j < Coordinate.getDimension(); j++) {\r\n        let coordinate: Coordinate = new Coordinate(i, j);\r\n        let color: Color = colorGetInitialColor(coordinate);\r\n        let piece: Piece = null;\r\n        if (color != null) {\r\n          piece = new Pawn(color);\r\n        }\r\n        this.board.put(coordinate, piece);\r\n      }\r\n    }\r\n    if (this.turn.getColor() !== Color.RED) {\r\n      this.turn.change();\r\n    }\r\n  }\r\n\r\n  move(coordinates: Array<Coordinate>): Error {\r\n    let error: Error = null;\r\n    let removedCoordinates: Array<Coordinate> = new Array<Coordinate>();\r\n    let pair: number = 0;\r\n    do {\r\n      error = this.isCorrectPairMove(pair, coordinates);\r\n      if (error == null) {\r\n        this.pairMove(removedCoordinates, pair, coordinates);\r\n        pair++;\r\n      }\r\n    } while (pair < coordinates.length - 1 && error == null);\r\n    error = this.isCorrectGlobalMove(error, removedCoordinates, coordinates);\r\n    if (error == null) {\r\n      this.turn.change();\r\n    } else {\r\n      this.unMovesUntilPair(removedCoordinates, pair, coordinates);\r\n    }\r\n    return error;\r\n  }\r\n\r\n  private isCorrectPairMove(pair: number, coordinates: Array<Coordinate>): Error {\r\n    if (coordinates[pair] === null || coordinates[pair + 1] === null) {\r\n      return Error.BAD_FORMAT;\r\n    }\r\n    if (this.board.isEmpty(coordinates[pair])) {\r\n      return Error.EMPTY_ORIGIN;\r\n    }\r\n    if (this.turn.getOppositeColor() === this.board.getColor(coordinates[pair])) {\r\n      return Error.OPPOSITE_PIECE;\r\n    }\r\n    if (!this.board.isEmpty(coordinates[pair + 1])) {\r\n      return Error.NOT_EMPTY_TARGET;\r\n    }\r\n    let betweenDiagonalPieces: Array<Piece> = this.board.getBetweenDiagonalPieces(coordinates[pair], coordinates[pair + 1]);\r\n    return this.board.getPiece(coordinates[pair]).isCorrectMovement(betweenDiagonalPieces, pair, coordinates);\r\n  }\r\n\r\n  private pairMove(removedCoordinates: Array<Coordinate>, pair: number, coordinates: Array<Coordinate>) {\r\n    let forRemoving: Coordinate = this.getBetweenDiagonalPiece(pair, coordinates);\r\n    if (forRemoving !== null) {\r\n      removedCoordinates.unshift(forRemoving);\r\n      this.board.remove(forRemoving);\r\n    }\r\n    this.board.move(coordinates[pair], coordinates[pair + 1]);\r\n    if (this.board.getPiece(coordinates[pair + 1]).isLimit(coordinates[pair + 1])) {\r\n      let color: Color = this.board.getColor(coordinates[pair + 1]);\r\n      this.board.remove(coordinates[pair + 1]);\r\n      this.board.put(coordinates[pair + 1], new Draught(color));\r\n    }\r\n  }\r\n\r\n  private getBetweenDiagonalPiece(pair: number, coordinates: Array<Coordinate>): Coordinate {\r\n    if (!coordinates[pair].isOnDiagonal(coordinates[pair + 1])) {\r\n      return null;\r\n    }\r\n    let betweenCoordinates: Array<Coordinate> = coordinates[pair].getBetweenDiagonalCoordinates(coordinates[pair + 1]);\r\n    if (betweenCoordinates.length === 0) {\r\n      return null;\r\n    }\r\n    for (let coordinate of betweenCoordinates) {\r\n      if (this.getPiece(coordinate) !== null) {\r\n        return coordinate;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private isCorrectGlobalMove(error: Error, removedCoordinates: Array<Coordinate>, coordinates: Array<Coordinate>): Error {\r\n    if (error !== null) {\r\n      return error;\r\n    }\r\n    if (coordinates.length > 2 && coordinates.length > removedCoordinates.length + 1) {\r\n      return Error.TOO_MUCH_JUMPS;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private unMovesUntilPair(removedCoordinates: Array<Coordinate>, pair: number, coordinates: Array<Coordinate>) {\r\n    for (let j = pair; j > 0; j--) {\r\n      this.board.move(coordinates[j], coordinates[j - 1]);\r\n    }\r\n    for (let removedPiece of removedCoordinates) {\r\n      this.board.put(removedPiece, new Pawn(this.getOppositeTurnColor()));\r\n    }\r\n  }\r\n\r\n  public isBlocked(): boolean {\r\n    for (let coordinate of this.getCoordinatesWithActualColor()) {\r\n      if (!this.isBlockedCoordinate(coordinate)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private getCoordinatesWithActualColor(): Array<Coordinate> {\r\n    let coordinates: Array<Coordinate> = new Array<Coordinate>();\r\n    for (let i = 0; i < this.getDimension(); i++) {\r\n      for (let j = 0; j < this.getDimension(); j++) {\r\n        let coordinate: Coordinate = new Coordinate(i, j);\r\n        let piece: Piece = this.getPiece(coordinate);\r\n        if (piece != null && piece.getColor() == this.getTurnColor()) {\r\n          coordinates.push(coordinate);\r\n        }\r\n      }\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  private isBlockedCoordinate(coordinate: Coordinate): boolean {\r\n    for (let i = 1; i <= 2; i++) {\r\n      for (let target of coordinate.getDiagonalCoordinates(i)) {\r\n        if (this.isCorrectPairMove(0, [coordinate, target]) === null) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public cancel() {\r\n    for (let coordinate of this.getCoordinatesWithActualColor()) {\r\n      this.board.remove(coordinate);\r\n    }\r\n    this.turn.change();\r\n  }\r\n\r\n  public getColor(coordinate: Coordinate): Color {\r\n    if (coordinate === null) {\r\n      return null;\r\n    }\r\n    return this.board.getColor(coordinate);\r\n  }\r\n\r\n  public getTurnColor(): Color {\r\n    return this.turn.getColor();\r\n  }\r\n\r\n  public resetTurn(){\r\n    this.turn.resetColor()\r\n  }\r\n\r\n  public getOppositeTurnColor(): Color {\r\n    return this.turn.getOppositeColor();\r\n  }\r\n\r\n  public getPiece(coordinate: Coordinate): Piece {\r\n    if (coordinate === null) {\r\n      return null;\r\n    }\r\n    return this.board.getPiece(coordinate);\r\n  }\r\n\r\n  public isMultiJumpPossible(coordinate: Coordinate) {\r\n    if (this.board.getAvailablePiecesToJump(coordinate).length === 0) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public getNumberOfPieces(color: Color): number {\r\n    return this.board.getNumberOfPieces(color);\r\n  }\r\n\r\n  public getDimension(): number {\r\n    return Coordinate.getDimension();\r\n  }\r\n\r\n  public changeTurnToAllowMultiJump(){\r\n    this.turn.change();\r\n  }\r\n\r\n  public changePiece(piece: Piece, row: number, column: number){\r\n    this.board.setPiece(piece, row, column);\r\n  }\r\n\r\n  public imprimir(){\r\n    this.board.impresion();\r\n  }\r\n}\r\n","import {Piece} from \"./Piece\";\r\nimport {Color} from \"./Color\";\r\nimport {Coordinate} from \"./Coordinate\";\r\nimport {Error} from \"./Error\";\r\n\r\nexport class Pawn extends Piece{\r\n\r\n  private static readonly CODES: string[] = ['r', 'n'];\r\n  private static readonly MAX_DISTANCE: number = 2;\r\n\r\n  constructor(color: Color) {\r\n    super(color);\r\n  }\r\n\r\n  isCorrectDiagonalMovement(pieceAmountBetweenCoordinates: number, pair: number, coordinates: Coordinate[]): Error {\r\n    if (!this.isAdvanced(coordinates[pair], coordinates[pair+1]))\r\n      return Error.NOT_ADVANCED;\r\n    let  distance: number = Number(coordinates[pair].getDiagonalDistance(coordinates[pair+1]));\r\n    if (distance > Pawn.MAX_DISTANCE)\r\n      return Error.TOO_MUCH_ADVANCED;\r\n    if (distance === Pawn.MAX_DISTANCE && pieceAmountBetweenCoordinates !== 1)\r\n      return Error.WITHOUT_EATING;\r\n    return null;\r\n  }\r\n\r\n  getCode(): string {\r\n    return Pawn.CODES[this.color.valueOf()];\r\n  }\r\n\r\n\r\n}\r\n","import {Color} from \"./Color\";\r\nimport {Coordinate} from \"./Coordinate\";\r\nimport {Error} from './Error';\r\n\r\nexport abstract class Piece {\r\n\r\n  protected color: Color;\r\n\r\n  constructor(color: Color) {\r\n    if (color !== null)\r\n      this.color = color;\r\n  }\r\n\r\n  isCorrectMovement(betweenDiagonalPieces: Array<Piece>, pair: number, coordinates: Coordinate[]): Error {\r\n    if (coordinates[pair] === null)\r\n      if (coordinates[pair + 1] === null)\r\n        return Error.BAD_FORMAT;\r\n    if (!coordinates[pair].isOnDiagonal(coordinates[pair + 1]))\r\n      return Error.NOT_DIAGONAL;\r\n    for (let piece of betweenDiagonalPieces)\r\n      if (this.color == piece.getColor())\r\n        return Error.COLLEAGUE_EATING;\r\n    return this.isCorrectDiagonalMovement(betweenDiagonalPieces.length, pair, coordinates);\r\n  }\r\n\r\n  abstract isCorrectDiagonalMovement(amountBetweenDiagonalPieces: number, pair: number, coordinates: Coordinate[]): Error;\r\n\r\n  isAdvanced(origin: Coordinate, target: Coordinate): boolean {\r\n    if (origin === null || target === null)\r\n      return false;\r\n    let difference: number = origin.getRow() - target.getRow();\r\n    if (this.color == Color.RED)\r\n      return difference > 0;\r\n    return difference < 0;\r\n  }\r\n\r\n  isLimit(coordinate: Coordinate): boolean {\r\n    return coordinate.isFirst() && this.getColor() === Color.RED\r\n      || coordinate.isLast() && this.getColor() === Color.BLACK;\r\n  }\r\n\r\n  getColor(): Color {\r\n    return this.color;\r\n  }\r\n\r\n  abstract getCode():string;\r\n}\r\n","import {Color, getColorValue} from './Color';\r\n\r\nexport class Turn {\r\n\r\n  private color: Color;\r\n\r\n  constructor() {\r\n    this.color = Color.RED;\r\n  }\r\n\r\n  change(){\r\n    this.color = this.getOppositeColor();\r\n  }\r\n\r\n  getOppositeColor(): Color{\r\n    return getColorValue(Number(this.color.valueOf() + 1) % 2);\r\n  }\r\n\r\n  getColor() : Color{\r\n    return this.color;\r\n  }\r\n\r\n  public resetColor(){\r\n    this.color = Color.RED;\r\n  }\r\n}\r\n","import {Piece} from './Piece';\r\n\r\nexport class MySquare {\r\n  private row: number;\r\n  private column: number;\r\n  private piece: Piece;\r\n  private selected: boolean;\r\n\r\n  constructor(piece: Piece, row: number, column: number) {\r\n    this.row = row;\r\n    this.column = column;\r\n    this.piece = piece;\r\n    this.selected = false;\r\n  }\r\n\r\n  getRow(): number {\r\n    return this.row;\r\n  }\r\n\r\n  getColumn(): number {\r\n    return this.column;\r\n  }\r\n\r\n  public getPiece(): Piece {\r\n    return this.piece;\r\n  }\r\n\r\n  public getPieceType(): string {\r\n    if (this.piece === null) {\r\n      return '';\r\n    }\r\n    return this.piece.getCode();\r\n  }\r\n\r\n  public setSelected(value: boolean) {\r\n    this.selected = value;\r\n  }\r\n\r\n  public isSelected(): boolean {\r\n    return this.selected;\r\n  }\r\n\r\n  clearPiece() {\r\n    this.piece = null;\r\n  }\r\n\r\n  put(piece: Piece) {\r\n    this.piece = piece;\r\n  }\r\n\r\n  setPiece(piece: Piece) {\r\n    this.piece = piece;\r\n  }\r\n}\r\n","import {Component} from '@angular/core';\r\nimport {DraughtsModel} from '../models/Draughts.model';\r\nimport {DraughtsService} from '../services/draughts.service';\r\nimport {DialogGameBoard} from '../game/controllers/dialog/DialogGameBoard.component';\r\nimport {MatDialog} from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-open-game',\r\n  templateUrl: './openGame.component.html'\r\n})\r\nexport class OpenGame {\r\n\r\n  public games: DraughtsModel[];\r\n  private userId;\r\n\r\n  constructor(private draughtsService: DraughtsService, private dialog: MatDialog) {\r\n    this.userId = this.draughtsService.parseJwt()['_id'];\r\n    this.draughtsService.getAllByUser(this.userId).subscribe(data => {\r\n      this.games = data;\r\n    });\r\n  }\r\n\r\n  selectGame(gameName: string, board: string){\r\n    const dialogRef = this.dialog.open(DialogGameBoard, {\r\n      height: '600px',\r\n      width: '1500px',\r\n      data: {gameName: gameName, board: board}\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      this.draughtsService.getAllByUser(this.userId).subscribe(data => {\r\n        this.games = data;\r\n      });\r\n    });\r\n  }\r\n}\r\n","<div>\r\n  <p>New game!</p>\r\n  <button (click)=\"selectGame(null, null)\">Select</button>\r\n</div>\r\n<table>\r\n  <caption>Games to Play</caption>\r\n  <tr>\r\n    <th scope=\"col\">Game Name</th>\r\n    <th scope=\"col\">Date</th>\r\n    <th scope=\"col\"></th>\r\n  </tr>\r\n  <tr *ngFor=\"let game of games\">\r\n    <td>{{ game.game_name}}</td>\r\n    <td> {{ game.date }}</td>\r\n    <td>\r\n      <button (click)=\"selectGame(game.game_name, game.board)\">Select</button>\r\n    </td>\r\n  </tr>\r\n</table>\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {DraughtsModel} from '../models/Draughts.model';\r\nimport {UserService} from './user.service';\r\nimport {environment} from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DraughtsService {\r\n\r\n  static API_END_POINT = environment.API;\r\n\r\n  constructor(private http: HttpClient, private userService: UserService) {\r\n  }\r\n\r\n  get(){\r\n    return this.http.get<DraughtsModel[]>(DraughtsService.API_END_POINT + '/draughts');\r\n  }\r\n\r\n  getAllByUser(userId: string){\r\n    return this.http.get<DraughtsModel[]>(DraughtsService.API_END_POINT + '/draughts/user/' + userId);\r\n  }\r\n\r\n  post(game_name: string, board: string, turn: number){\r\n    const creator = this.parseJwt()['_id'];\r\n    const game = '{' +\r\n      '\"game_name\": \"' + game_name + '\", ' +\r\n      '\"board\": \"' + board + '\", ' +\r\n      '\"creator\": \"' + creator + '\", ' +\r\n      '\"turn\":\"' + turn + '\"}';\r\n    return this.http.post<DraughtsModel>(DraughtsService.API_END_POINT + '/draughts', JSON.parse(game));\r\n  }\r\n\r\n  put(game_name: string, board: string, turn: number){\r\n    const game = '{' +\r\n      '\"board\": \"' + board + '\", ' +\r\n      '\"turn\":\"' + turn + '\"}';\r\n    return this.http.put<DraughtsModel>(DraughtsService.API_END_POINT + '/draughts/' + game_name, JSON.parse(game));\r\n  }\r\n\r\n  parseJwt () {\r\n    const token = this.userService.getToken();\r\n    let base64Url = token.split('.')[1];\r\n    let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n    let jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n    }).join(''));\r\n\r\n    return JSON.parse(jsonPayload);\r\n  }\r\n}\r\n","import {Injectable} from \"@angular/core\";\r\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\r\nimport {UserModel} from \"../models/User.model\";\r\nimport {Observable} from \"rxjs\";\r\nimport {environment} from '../../environments/environment';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n\r\n  static API_END_POINT = environment.API;\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  getUsers(): Observable<UserModel[]> {\r\n    return this.http.get<UserModel[]>(UserService.API_END_POINT + '/users');\r\n  }\r\n\r\n  login(email: string, password: string): Observable<string> {\r\n    const user = '{' +\r\n      '\"email\": \"' + email + '\", ' +\r\n      '\"password\":\"' + password + '\"}';\r\n    return this.http.post<string>(UserService.API_END_POINT + '/users/login', JSON.parse(user));\r\n  }\r\n\r\n  getUserProfile(): Observable<UserModel> {\r\n    return this.http.get<UserModel>(UserService.API_END_POINT + '/users/profile', {\r\n      headers: this.getHeaders()\r\n    });\r\n  }\r\n\r\n  isUserActive() {\r\n    if (window.sessionStorage.getItem('token') !== null) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  registration(username: string, email: string, password: string): Observable<UserModel> {\r\n    const user = '{' +\r\n      '\"username\": \"' + username + '\", ' +\r\n      '\"email\": \"' + email + '\", ' +\r\n      '\"password\":\"' + password + '\"}';\r\n    return this.http.post<UserModel>(UserService.API_END_POINT + '/users', JSON.parse(user));\r\n  }\r\n\r\n  saveToken(token: string) {\r\n    window.sessionStorage.setItem('token', token);\r\n  }\r\n\r\n  getToken(): string {\r\n    return window.sessionStorage.getItem('token');\r\n  }\r\n\r\n  deleteUser(): Observable<UserModel> {\r\n    return this.http.delete<UserModel>(UserService.API_END_POINT + '/users/profile', {\r\n      headers: this.getHeaders()\r\n    });\r\n  }\r\n\r\n  getHeaders(): HttpHeaders {\r\n    return new HttpHeaders().set('auth-token', this.getToken());\r\n  }\r\n\r\n  updateUser(username: string): Observable<UserModel> {\r\n    const user = '{' +\r\n      '\"username\": \"' + username + '\"}';\r\n\r\n    return this.http.put<UserModel>(UserService.API_END_POINT + '/users/profile', JSON.parse(user), {\r\n      headers: this.getHeaders()\r\n    });\r\n  }\r\n\r\n  logout(){\r\n    window.sessionStorage.removeItem('token');\r\n    alert('Thanks for playing Draughts');\r\n  }\r\n}\r\n","import {Component} from '@angular/core';\r\nimport {UserService} from \"../../services/user.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-user-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent {\r\n\r\n  email = '';\r\n  password = '';\r\n  message = '';\r\n\r\n  constructor(private userService: UserService, private router: Router) {\r\n  }\r\n\r\n  login() {\r\n    this.userService.login(this.email, this.password).subscribe(\r\n      data => {\r\n        this.userService.saveToken(data['token']);\r\n        this.router.navigate(['/']);\r\n      },\r\n      error => {\r\n        this.message = error.statusText;\r\n      });\r\n  }\r\n}\r\n","<mat-card>\r\n  <mat-form-field>\r\n    <input matInput type=\"email\" placeholder=\"email\" [(ngModel)]=\"email\">\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    <input matInput type=\"password\" placeholder=\"password\" [(ngModel)]=\"password\">\r\n  </mat-form-field>\r\n  <p> {{message}} </p>\r\n  <button mat-raised-button color='primary'(click)=\"login()\">Login</button>\r\n</mat-card>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {UserService} from '../../services/user.service';\r\nimport {UserModel} from '../../models/User.model';\r\nimport {Router} from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-user-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.css']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n\r\n  user: UserModel;\r\n  userId = '';\r\n  username = '';\r\n  email = '';\r\n  confirmDelete = false;\r\n  message = '';\r\n\r\n  constructor(private userService: UserService, private router: Router) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.getUserProfile().subscribe(data => {\r\n      this.user = data;\r\n      this.username = this.user.username;\r\n      this.email = this.user.email;\r\n    });\r\n  }\r\n\r\n  updateProfile() {\r\n    this.userService.updateUser(this.username).subscribe(data => {\r\n      this.user = data;\r\n      this.message = '';\r\n    }, error => {\r\n      this.message = error.statusText;\r\n    });\r\n  }\r\n\r\n  undo() {\r\n    this.confirmDelete = false;\r\n  }\r\n\r\n  deleteUser() {\r\n    this.confirmDelete = true;\r\n  }\r\n\r\n  logout() {\r\n    this.userService.logout();\r\n    this.router.navigate(['']);\r\n  }\r\n\r\n  deleteAccount() {\r\n    this.userService.deleteUser().subscribe(data => {\r\n      alert('Account deleted');\r\n      this.router.navigate(['']);\r\n    });\r\n  }\r\n}\r\n","<h1>{{user.username}}'s Profile</h1>\r\n<mat-card>\r\n  <mat-form-field>\r\n    <mat-label>Username</mat-label>\r\n    <input matInput type=\"text\" [(ngModel)]=\"username\">\r\n  </mat-form-field>\r\n  <mat-form-field>\r\n    <mat-label>Email</mat-label>\r\n    <input matInput type=\"email\" disabled value=\"{{email}}\">\r\n  </mat-form-field>\r\n  <p *ngIf=\"message != ''\">{{message}}</p>\r\n  <button mat-raised-button color='primary' (click)=\"updateProfile()\">Update profile</button>\r\n  <button mat-raised-button color='warn' (click)=\"deleteUser()\">Delete account</button>\r\n  <div *ngIf=\"confirmDelete\">\r\n    <p>Are you sure?</p>\r\n    <button mat-raised-button color='primary' (click)=\"undo()\">No</button>\r\n    <button mat-raised-button color='warn' (click)=\"deleteAccount()\">Yes</button>\r\n  </div>\r\n  <br>\r\n  <div>\r\n    <button mat-raised-button color='accent' (click)=\"logout()\">Logout</button>\r\n  </div>\r\n</mat-card>\r\n","import { Component } from '@angular/core';\r\nimport {UserService} from \"../../services/user.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-user-registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.css']\r\n})\r\nexport class RegistrationComponent {\r\n\r\n  username = '';\r\n  email = '';\r\n  password = '';\r\n  repetedPassword = '';\r\n\r\n  constructor(private userService: UserService, private router: Router) {\r\n  }\r\n\r\n  register(){\r\n    if (this.password === this.repetedPassword)\r\n      this.userService.registration(this.username, this.email, this.password).subscribe(\r\n        data => {\r\n          this.router.navigate(['']);\r\n        }\r\n      );\r\n  }\r\n}\r\n","<mat-card>\r\n<mat-form-field>\r\n  <input matInput type=\"text\" placeholder=\"username\" [(ngModel)]=\"username\">\r\n</mat-form-field>\r\n<mat-form-field>\r\n  <input matInput type=\"email\" placeholder=\"email\" [(ngModel)]=\"email\">\r\n</mat-form-field>\r\n<mat-form-field>\r\n  <input matInput type=\"password\" placeholder=\"password\" [(ngModel)]=\"password\">\r\n</mat-form-field>\r\n<mat-form-field>\r\n  <input matInput type=\"password\" placeholder=\"repit password\" [(ngModel)]=\"repetedPassword\">\r\n</mat-form-field>\r\n<button mat-raised-button color='primary'(click)=\"register()\">Register</button>\r\n</mat-card>\r\n","import {Component} from '@angular/core';\r\nimport {UserService} from '../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-welcome',\r\n  templateUrl: './welcome.component.html'\r\n})\r\nexport class WelcomeComponent {\r\n\r\n  constructor(public userService:UserService) {\r\n  }\r\n}\r\n","<h1>Welcome to draughts</h1>\r\n<div *ngIf=\"!userService.isUserActive()\" >\r\n<button mat-raised-button routerLink=\"/signup\"><span class=\"signup\">Sign up</span></button>\r\n<button mat-raised-button routerLink=\"/login\"><span class=\"login\">Log in</span></button>\r\n</div>\r\n<div *ngIf=\"userService.isUserActive()\" >\r\n  <button mat-raised-button routerLink=\"/playGame\"><span class=\"openGame\">Play!</span></button>\r\n  <button mat-raised-button routerLink=\"/\" (click)=\"userService.logout()\"><span class=\"logout\">Log out!</span></button>\r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  API: 'http://localhost:4600'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}